{"version":3,"sources":["consts/colors.js","utils/data.js","getData.js","components/CountrySelect.jsx","components/Header.jsx","components/NestedBoxes.jsx","components/Charts.jsx","components/HomePage.jsx","components/Dictionary.jsx","components/App.jsx","index.jsx","consts/data.js","utils/display.js"],"names":["themePrimary","sand","themeSecondary","indigo","headerColor","gold","colorGroups","orange","grass","plum","tomato","sky","brown","violet","fillIntensity","strokeIntensity","radColors","red","crimson","pink","purple","blue","cyan","teal","green","mint","lime","yellow","amber","gray","mauve","slate","sage","olive","bronze","getRC","radColor","idx","Object","keys","replace","SPECIAL_FILTERS_MAP","_NONE_","_","negate","identity","_SOMETHING_","_ANY_","stubTrue","defaultCompFn","cellVal","filterVal","toLowerCase","getUrl","gid","configParser","row","C","chartId","each","value","key","filterByCountryGenerator","selectedIso","D","country_iso_code","getElements","chartConfig","filter","k","S","all","startsWith","_key_","getSetting","element","chartConfigsMap","field","get","getField","getFieldBoolean","getFormula","formula","getBounds","value_lower","vLower","value_upper","vUpper","parseFloat","getColors","chartSettings","chartElements","visibleElements","groupIdx","parseInt","Math","abs","colorOverride","length","baseColors","colors","map","chartType","push","transformYearRange","range","result","exec","y1","y2","String","getFilter","year","allChartsFilter","allElementsFilter","elementFilter","backupFilters","getRow","chartSourceData","matchingRows","every","maxBy","r","Number","sourceYear","getDataPoint","valueField","displayName","set","G","DISPLAY_NAME","capAndFormat","displayValue","percentage","options","cap","capPercentage","decimals","percentageDecimals","displayPercent","capValue","forEach","F","v","toUpperCase","cv","coarseFormatting","coarseIntegerFormatting","displayNumber","DISPLAY_VALUE","getCalculatedDataPoint","dataPoints","rawFormula","convertedFormula","eval","error","console","warn","test","isNumber","memoizedGetAllDataFromTab","memoize","async","csv","catch","e","getCharts","chartIds","Promise","includes","sourceGid","d","getCountryDataFromTab","getterMap","table","getTable","table_list","getTableList","text","getText","getChart","getter","getChartOrTable","elements","textValues","countryIso","type","name","chartWideConfig","colNames","f","some","REGEX","rgx","colorMap","_color_by_","reduce","accum","KVPairToBeColored","split","color","data","i","rowName","values","cn","LCVal","chartWideFieldVal","columnName","columnNamed","sheetRow","hideRowNames","isPercentage","rowNames","uniq","elem","TABLE_DELIN","rn","hidden","year_range","isTimeseries","years_arr","elementNameMap","getSiteData","CONFIGURABLE_GID_NAMES","GID_MAP","homeRows","home","lastConfiguredRow","findLast","setConfigGids","cmsData","CMS_SHEETS","sheetName","baseConfigs","configs","shaped","groupBy","uniqBy","c","chart_id","id","mapValues","configParams","elemDetails","elementName","getChartConfigs","log","PRE_LOAD_DATA","config","CountrySelect","handleCountryChange","countries","FormControl","sx","width","marginTop","marginBottom","InputLabel","Select","labelId","label","onChange","MenuItem","iso","Header","Box","flexGrow","AppBar","position","background","Toolbar","BUFFER_RATIO","TEXT_BUFFER_RATIO","DEFAULT_RATIO","FONT_SIZE_RATIO","HEADER_FONT_SIZE_RATIO","LINE_HEIGHT","CAP_VALUE","innerTextGetter","ratio","round","NestedBoxes","ratios","fillColors","textColors","content","firstSide","horizontal","classes","getInnerText","bufferRatio","textBufferRatio","defaultRatio","fontSizeRatio","headerFontSizeRatio","lineHeight","resolveOrientation","v1","v2","bufferDistance","textBufferDistance","side","x","y","fontSize","headerFontSize","rects","texts","connectingLines","innerText","colorOuter","colorInner","textColor","height","fill","below","className","style","txt","j","dy","nextSide","borderWidth","lineStyle","strokeWidth","strokeDasharray","line1","stroke","x1","x2","line2","totalX","totalY","totalXh","totalYh","classNames","viewBox","CustomTooltip","active","payload","isArea","payloads","sortBy","source","p","reverse","dataKey","bounds","formattedBounds","source_display","source_database","Typography","xmlns","cx","cy","join","Charts","chartData","hiddenElements","setHiddenElements","React","useState","getLineChart","chart","ElementComponent","AreaChart","Area","LineChart","Line","formatter","getName","ResponsiveContainer","aspect","maxHeight","ComposedChart","margin","top","right","left","bottom","CartesianGrid","XAxis","YAxis","domain","undefined","tickFormatter","Tooltip","cursor","Legend","onClick","hiddenMap","cloneDeep","iconSize","iconType","hide","legendType","tooltipType","stackId","firstRow","headers","TableCell","scope","rows","TableRow","component","TableContainer","Table","textAlign","fontWeight","minWidth","TableHead","TableBody","getNested","theme","useTheme","isSm","useMediaQuery","breakpoints","down","up","el","val","MULTI_LINE_TEXT_DELIN","title","getIntro","country","find","variant","lg","maxWidth","xl","mb","sm","display","mr","md","letterSpacing","textTransform","m","flexBasis","xs","flexShrink","ml","pb","flexWrap","pt","justifyContent","HomePage","homeCopy","tapFields","CMS_FIELDS","TAP","px","blurb","dangerouslySetInnerHTML","__html","py","borderRadius","paddingInlineStart","getTapList","Dictionary","dictionary","mx","mt","palette","paper","columnCount","columnGap","sort","a","b","term","M","definition","transformLink","App","setIso","setChartData","setDictionary","setCountries","setHomeCopy","setChartIds","setChartConfigsMap","useEffect","then","homecopy","charts","getChartData","loading","Paper","elevation","fontFamily","typography","target","realIso","createTheme","primary","main","secondary","ThemedApp","ThemeProvider","rootElement","document","getElementById","render","CONFIG_FIELDS","modelled","DATA_FIELDS","indicator","indicator_description","sex","age","population_segment","population_sub_group","country_name","area_name","geographic_scope","value_comment","unit_format","source_organization","notes","modality","modality_category","import_file","import_timestamp","row_id","suppressed","Deliverable","Supplier","quarter","SPECIAL_VALUES","GENERATED_FIELDS","DISPLAY_VALUE_LOWER","DISPLAY_VALUE_UPPER","min","isFinite","toString","toPrecision","t","replaceAll"],"mappings":"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","file":"static/js/main.1c5630a3.chunk.js","sourcesContent":["import {\n  tomato,\n  red,\n  crimson,\n  pink,\n  plum,\n  purple,\n  violet,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  grass,\n  orange,\n  brown,\n  sky,\n  mint,\n  lime,\n  yellow,\n  amber,\n  gray,\n  mauve,\n  slate,\n  sage,\n  olive,\n  sand,\n  gold,\n  bronze,\n} from \"@radix-ui/colors\";\n\n// keep in sync with index.html background\nexport const themePrimary = sand;\nexport const themeSecondary = indigo;\nexport const headerColor = gold;\nexport const coreColors = [orange, grass, plum];\nexport const altColors = [tomato, indigo, gold];\nexport const alt2Colors = [sky, brown, violet, sand];\nexport const colorGroups = [coreColors, altColors, alt2Colors];\n// these intensities correspond to the radix index to use\nexport const fillIntensity = 8;\nexport const strokeIntensity = 11;\n\nexport const radColors = [\n  tomato,\n  red,\n  crimson,\n  pink,\n  plum,\n  purple,\n  violet,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  grass,\n  orange,\n  brown,\n  sky,\n  mint,\n  lime,\n  yellow,\n  amber,\n  gray,\n  mauve,\n  slate,\n  sage,\n  olive,\n  sand,\n  gold,\n  bronze,\n];\n\nexport const getRC = (radColor, idx) => {\n  // return custom colors as-is\n  if (typeof radColor === \"string\") return radColor;\n  const c1 = Object.keys(radColor)[0];\n  const c = c1.replace(/\\d/, \"\") + idx;\n  return radColor[c];\n};\n","import _ from \"lodash\";\nimport { colorGroups } from \"../consts/colors\";\nimport {\n  CONFIG_FIELDS as C,\n  DATA_FIELDS as D,\n  GENERATED_FIELDS as G,\n  SPECIAL_VALUES as S,\n} from \"../consts/data\";\nimport { capValue, displayNumber, displayPercent } from \"./display\";\n\n// functions to test whether a row matches a filter for special Sheet cell input values\nconst SPECIAL_FILTERS_MAP = {\n  _NONE_: _.negate(_.identity), // cells only included if empty\n  _SOMETHING_: _.identity, // cells only included if not empty\n  _ANY_: _.stubTrue, // allow any cell value (to overwrite broader filter)\n};\n// default function to test whether a row matches a filter\nconst defaultCompFn = (cellVal, filterVal) =>\n  cellVal.toLowerCase() === filterVal.toLowerCase();\n\n// HELPERS\nexport const getUrl = (gid) =>\n  `https://docs.google.com/spreadsheets/d/e/2PACX-1vSAEOXOt5aHDcb35lpCsSO5AvHTZPplXHrHGaIXTJjCtW_B96D0MOItWZLGv1j4lagTxnuVClms6M0X/pub?gid=${gid}&single=true&output=csv`;\n\nexport const configParser = (row) => {\n  if (!row[C.chartId]) return;\n  delete row[\"\"];\n\n  _.each(row, (value, key) => {\n    // remove k/v pair for actually empty values\n    if (value === \"\") delete row[key];\n    // turn \"null\" in sheet into \"\" values\n    // else row[key] = value === \"null\" ? \"\" : value;\n  });\n\n  return row;\n};\n\nexport const filterByCountryGenerator = (selectedIso) => {\n  return (row) => (row[D.country_iso_code] === selectedIso ? row : null);\n};\n\n// determine actual chart elements from chart config\nexport const getElements = (chartConfig) =>\n  Object.keys(chartConfig).filter((k) => k !== S.all && !k.startsWith(S._key_));\n\n// get setting from element, else chart, else global\nexport const getSetting = ({\n  element = S.all,\n  chartConfigsMap,\n  field,\n  chartId = S.all,\n}) =>\n  _.get(chartConfigsMap, [chartId, element, 0, field]) ||\n  _.get(chartConfigsMap, [chartId, S.all, 0, field]) ||\n  _.get(chartConfigsMap, [S.all, 0, field]);\n\n// omit element to get chart-wide setting\nexport const getField = ({ element = S.all, chartConfig, field }) =>\n  _.get(chartConfig, [element, 0, field]);\n\n// omit element to get chart-wide setting\nexport const getFieldBoolean = ({ element = S.all, chartConfig, field }) =>\n  !!getField({ element, chartConfig, field });\n\nexport const getFormula = ({ element, chartConfig }) =>\n  getField({ element, chartConfig, field: C.formula });\n\nexport const getBounds = (row = {}) => {\n  const { [D.value_lower]: vLower, [D.value_upper]: vUpper } = row;\n  if (!parseFloat(vLower) || !parseFloat(vUpper)) return;\n  return [parseFloat(vLower), parseFloat(vUpper)];\n};\n\n// determine a chart's colors based on its override settings\nexport const getColors = ({\n  chartSettings,\n  chartConfig,\n  chartElements: visibleElements,\n}) => {\n  // chart-wide override determines which color group to use\n  let groupIdx = parseInt(Math.abs(_.get(chartSettings, C.colorOverride)));\n  groupIdx = ((groupIdx || 1) - 1) % colorGroups.length;\n\n  const baseColors = colorGroups[groupIdx];\n  const colors = visibleElements.map((element, idx) => {\n    // element-specific overrides trump the base group color\n    const override = getField({ chartConfig, element, field: C.colorOverride });\n    return override || baseColors[idx % baseColors.length];\n  });\n\n  const type = _.get(chartSettings, C.chartType);\n  // nested boxes charts need one more color than they have elements\n  if (type === \"nested\")\n    colors.push(baseColors[visibleElements.length % baseColors.length]);\n\n  return colors;\n};\n\n// turn \"[2018-2020]\" into [2018, 2019, 2020]\nexport const transformYearRange = (range) => {\n  const regex = /\\[(\\d+)-(\\d+)\\]/;\n  const result = regex.exec(range);\n  if (!result || !result.length > 1) return [];\n  const y1 = parseInt(result[1]);\n  const y2 = parseInt(result[2]);\n  return _.range(y1, y2 + 1).map(String);\n};\n\n// derive a row filter of type { sex: \"males\", age: \"15+\" }\nexport const getFilter = ({\n  chartId,\n  element,\n  year = null,\n  selectedIso,\n  chartConfigsMap,\n}) => {\n  // filter applied to all charts\n  const allChartsFilter = _.get(chartConfigsMap, \"all[0]\", {});\n  // filter applied to all elements within this chart\n  const allElementsFilter = _.get(chartConfigsMap, [chartId, S.all, 0], {});\n  // filter applied to this element\n  // (backupFilters may be used for source prioritization)\n  const [elementFilter, ...backupFilters] = _.get(\n    chartConfigsMap,\n    [chartId, element],\n    [{}]\n  );\n  // console.log(elementFilter);\n\n  const filter = {\n    ...allChartsFilter,\n    ...allElementsFilter,\n    ...elementFilter,\n    selectedIso,\n  };\n  if (!!year) filter.year = year;\n  return filter;\n};\n\n// find appropriate row using filter\nexport const getRow = ({ filter, chartSourceData }) => {\n  const matchingRows = _.filter(chartSourceData, (row) => {\n    return _.every(filter, (filterVal, field) => {\n      // only filter by data sheet fields\n      if (!D[field]) return true;\n\n      const cellVal = row[field] || \"\";\n      let comparisonFn = SPECIAL_FILTERS_MAP[filterVal] || defaultCompFn;\n\n      // if (!row[field]) return !filterVal;\n      return !!comparisonFn(cellVal, filterVal);\n    });\n  });\n\n  // find highest year, use source year to break ties\n  return _.maxBy(matchingRows, (r) => {\n    const y = Number(_.get(r, D.year, 0));\n    const sy = Number(_.get(r, D.sourceYear, 0));\n    return y + sy / 10000;\n  });\n};\n\n// find/create data point to use for a line point or table cell\nexport const getDataPoint = ({\n  chartId,\n  element,\n  year = null,\n  selectedIso,\n  chartConfigsMap,\n  chartSourceData,\n  // valueParser = _.identity,\n}) => {\n  const filter = getFilter({\n    chartId,\n    element,\n    year,\n    selectedIso,\n    chartConfigsMap,\n    chartSourceData,\n  });\n\n  const row = getRow({ filter, chartSourceData });\n\n  // usually we care about \"value\", but sometimes \"value_comment\"\n  const valueField = _.get(filter, C.valueField, D.value);\n  let value = _.get(row, valueField, null);\n\n  if (!row || !value) return {};\n\n  // add display name for elements appearance in legend, tooltip\n  const displayName = getField({\n    element,\n    chartConfig: chartConfigsMap[chartId],\n    field: C.displayName,\n  });\n  displayName && _.set(row, G.DISPLAY_NAME, displayName);\n\n  // assume that value_comment (or other non-value) field is for non-numeric column\n  if (valueField && valueField !== D.value) return { row, value };\n\n  // assume that value holds numeric data, proceed to process\n  return capAndFormat({ row, value, chartConfigsMap, chartId, element });\n};\n\n// mutates its row input!\n// applies caps and display formatting settings to numeric row/values\nexport const capAndFormat = ({\n  row,\n  value,\n  chartConfigsMap,\n  chartId,\n  element,\n}) => {\n  let displayValue = value;\n\n  const isPercentage = getFieldBoolean({\n    chartConfig: chartConfigsMap[chartId],\n    field: C.percentage,\n  });\n\n  if (isPercentage) {\n    const cap = getSetting({\n      chartConfigsMap,\n      chartId,\n      element,\n      field: C.capPercentage,\n    });\n    const decimals = getSetting({\n      chartConfigsMap,\n      chartId,\n      element,\n      field: C.percentageDecimals,\n    });\n\n    // value = value && valueParser(value);\n    const options = { cap, decimals };\n    // be sure to capture display value BEFORE capping, so it includes >\n    displayValue = displayPercent(value, options);\n    value = capValue(value, options);\n    // overwriting\n    capValue && _.set(row, D.value, value);\n\n    [D.value_lower, D.value_upper].forEach((F) => {\n      const v = _.get(row, F);\n\n      // formatted capped val for tooltips\n      v && _.set(row, `DISPLAY_${F.toUpperCase()}`, displayPercent(v, options));\n\n      // capped val for plotting\n      const cv = v && capValue(v, options);\n      cv && _.set(row, F, cv);\n    });\n  } else {\n    // is integer\n    const coarseFormatting = !!getSetting({\n      chartConfigsMap,\n      chartId,\n      element,\n      field: C.coarseIntegerFormatting,\n    });\n    displayValue = displayNumber(value, { coarseFormatting });\n\n    [D.value_lower, D.value_upper].forEach((F) => {\n      let v = _.get(row, F);\n      // formatted value for tooltips\n      v && _.set(row, `DISPLAY_${F.toUpperCase()}`, displayNumber(v));\n      // v && _.set(row, F, v);\n    });\n  }\n\n  // formatted value for tooltips\n  displayValue && _.set(row, G.DISPLAY_VALUE, displayValue);\n\n  return { row, value };\n};\n\n// create derived data point (from other found points) using formula provided in Sheet\nexport const getCalculatedDataPoint = ({\n  chartConfigsMap,\n  element,\n  dataPoints,\n  chartId,\n}) => {\n  const chartConfig = chartConfigsMap[chartId];\n  const rawFormula = getFormula({ element, chartConfig });\n  let convertedFormula = rawFormula;\n\n  // where the *magic* happens: formula is converted from the\n  // string provided in the Sheet to an actual mathematical\n  // expression by swapping element names for their values\n  // e.g.:  total_hiv-aware  becomes  7843-384\n  _.each(dataPoints, (value, key) => {\n    convertedFormula = convertedFormula.replace(key, value);\n  });\n\n  let result = null;\n  // attempt to evaluate the resulting expression\n  try {\n    result = eval(convertedFormula);\n  } catch (error) {\n    console.warn(`cannot evaluate ${rawFormula} (${convertedFormula})`);\n    return { value: null };\n  }\n\n  // only allow numbers & arith operators (otherwise eg null will evaluate to 0)\n  if (!/^[\\d-+*\\/\\.]+$/.test(convertedFormula) || !_.isNumber(result)) {\n    console.warn(`missing values for ${rawFormula} (${convertedFormula})`);\n    return { value: null };\n  }\n\n  // add display name for elements appearance in legend, tooltip\n  const displayName =\n    getField({\n      element,\n      chartConfig,\n      field: C.displayName,\n    }) || element;\n\n  // console.log(result);\n  return capAndFormat({\n    value: result,\n    row: { [G.DISPLAY_NAME]: displayName },\n    chartConfigsMap,\n    chartId,\n    element,\n  });\n};\n","import { csv } from \"d3-fetch\";\nimport _ from \"lodash\";\nimport {\n  CONFIG_FIELDS as C,\n  DATA_FIELDS as D,\n  // GENERATED_FIELDS as G,\n  SPECIAL_VALUES as S,\n  GID_MAP,\n  CONFIGURABLE_GID_NAMES,\n  TABLE_DELIN,\n  PRE_LOAD_DATA,\n  CMS_SHEETS,\n} from \"./consts/data\";\nimport {\n  getUrl,\n  configParser,\n  filterByCountryGenerator,\n  getElements,\n  getFieldBoolean,\n  getFormula,\n  getBounds,\n  getColors,\n  transformYearRange,\n  getDataPoint,\n  getCalculatedDataPoint,\n  getField,\n  getSetting,\n} from \"./utils/data\";\n\n// ASYNC FETCHERS\nasync function setConfigGids() {\n  // return if already configured\n  if (CONFIGURABLE_GID_NAMES.every((name) => !!GID_MAP[name])) return;\n  const homeRows = await csv(getUrl(GID_MAP.home)).catch((e) => {\n    console.error(\"error in csv(getUrl(GID_MAP.home)): \", e);\n  });\n  CONFIGURABLE_GID_NAMES.forEach((name) => {\n    const lastConfiguredRow = _.findLast(homeRows, (r) => !!r[name]);\n    if (!lastConfiguredRow) {\n      console.error(\"No Sheet GID found for: \", name);\n      return;\n    }\n    GID_MAP[name] = lastConfiguredRow[name];\n  });\n}\n\nasync function getChartConfigs() {\n  const baseConfigs = await csv(getUrl(GID_MAP.configs), configParser).catch(\n    (e) => {\n      console.error(\"error in csv(getUrl(GID_MAP.configs), configParser): \", e);\n    }\n  );\n  const shaped = _.groupBy(baseConfigs, C.chartId);\n\n  const chartIds = _.uniqBy(baseConfigs, \"chart_id\")\n    .map((c) => c.chart_id)\n    .filter((id) => id !== S.all);\n\n  const chartConfigsMap = _.mapValues(shaped, (configParams, name) => {\n    // wise?\n    if (name === S.all) return configParams;\n    return _.groupBy(configParams, C.element);\n  });\n\n  _.each(chartConfigsMap, (configParams, name) => {\n    if (name === S.all) return;\n    _.each(configParams, (elemDetails, elementName) => {\n      if (elementName === S.all) return;\n    });\n  });\n\n  return { chartConfigsMap, chartIds };\n}\n\nasync function getAllDataFromTab(gid) {\n  // console.log(\"get data from\", gid);\n  if (!gid) return null;\n  return await csv(getUrl(gid)).catch((e) => {\n    console.error(\"error in getChartOrTable()): \", e);\n  });\n}\n\n// so we only request data from each tab once\n// after first dashboard load, countries should load instantly\nconst memoizedGetAllDataFromTab = _.memoize(getAllDataFromTab);\n\nasync function getCountryDataFromTab(gid, selectedIso) {\n  const allData = await memoizedGetAllDataFromTab(gid);\n\n  return allData.filter((d) => filterByCountryGenerator(selectedIso)(d));\n}\n\nasync function getCharts({ chartConfigsMap, chartIds, selectedIso }) {\n  return await Promise.all(\n    chartIds.map((chartId) =>\n      getChartOrTable({ chartConfigsMap, chartId, selectedIso })\n    )\n  ).catch((e) => {\n    console.error(\"error in getCharts(): \", e);\n  });\n}\n\nasync function getChartOrTable({ chartConfigsMap, chartId, selectedIso }) {\n  if (\n    [\n      // \"deliverables\",\n      // \"interventions\",\n      // \"priorities\",\n      // \"policy\",\n      // \"commun_deliv\",\n      // \"late_hiv\"\n    ].includes(chartId)\n  )\n    return;\n  // console.log(\"creating : \", chartId);\n  const chartConfig = chartConfigsMap[chartId];\n  // the chart settings are the values on the chart config where element === S.all (\"all\")\n  const chartSettings = _.get(chartConfig, \"all[0]\");\n\n  if (!chartConfig || !chartSettings || !chartSettings[C.sourceGid]) {\n    console.warn(\"skipping chart: \", chartId);\n    return null;\n  }\n  const chartSourceData = await getCountryDataFromTab(\n    chartSettings[C.sourceGid],\n    selectedIso\n  );\n\n  const getterMap = {\n    table: getTable,\n    table_list: getTableList,\n    text: getText,\n    // nested: getNested, // uses chart\n  };\n\n  const getter = _.get(getterMap, chartSettings[C.chartType], getChart);\n\n  return getter({\n    chartId,\n    chartSettings,\n    chartConfigsMap,\n    chartSourceData,\n    selectedIso,\n  });\n}\n\nfunction getText({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  selectedIso,\n}) {\n  // console.log(\n  //   chartId,\n  //   chartSettings,\n  //   chartConfigsMap,\n  //   chartSourceData,\n  //   selectedIso\n  // );\n\n  const elements = getElements(chartConfigsMap[chartId]);\n  const textValues = {};\n  _.each(elements, (element) => {\n    const { row, value } = getDataPoint({\n      chartId,\n      element,\n      selectedIso,\n      chartConfigsMap,\n      chartSourceData,\n      // valueParser: isPercentage\n    });\n    textValues[element] = value;\n    textValues[`${element}_row`] = row;\n  });\n\n  return {\n    textValues,\n    chartId,\n    countryIso: selectedIso,\n    elements,\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n}\n\nfunction getTableList({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  selectedIso,\n}) {\n  const chartConfig = chartConfigsMap[chartId];\n  const chartWideConfig = _.get(chartConfig, [S.all, 0]);\n  const colNames = Object.keys(chartWideConfig).filter(\n    (f) => !!D[f] || _.some(D.REGEX, (rgx) => !!rgx.test(f))\n  );\n\n  /*\n   * Get colorBy background color\n   * eg \"Q3 2021\" data field has value \"_color_by_status\"\n   * for Deliverables table. It also has a \"key\" element of\n   * _key__color_by_status__completed with corresponding\n   * display_name of green. Here we create a map of:\n   * { status: { completed: green, ... }} to later identify\n   * \"completed\" cells to give a background color \"green\".\n   */\n  let colorMap = {};\n  try {\n    colorMap = Object.keys(chartConfig)\n      .filter((key) => key.startsWith(`${S._key_}${S._color_by_}`))\n      .reduce((accum, key) => {\n        const KVPairToBeColored = key.replace(`${S._key_}${S._color_by_}`, \"\");\n        const [k, v] = KVPairToBeColored.split(\"__\");\n        const color = _.get(chartConfig, [key, 0, C.displayName]);\n        if (color) _.set(accum, [k, v], color);\n        return accum;\n      }, {});\n  } catch (error) {\n    console.warn(\n      `color mapping entered incorrectly for ${chartId}, ignoring. ${error}`\n    );\n  }\n\n  const data = chartSourceData.map((row, i) => {\n    return {\n      rowName: i,\n      values: colNames.map((cn) => {\n        const value = _.get(row, cn);\n        const LCVal = value && value.toLowerCase();\n\n        let chartWideFieldVal = _.get(chartWideConfig, cn, \"\");\n        chartWideFieldVal =\n          chartWideFieldVal.includes(S._color_by_) &&\n          chartWideFieldVal.replace(S._color_by_, \"\");\n        // use the above described map to _.get, eg, [\"status\", \"complete\"]\n        const chartColorSetting = _.get(colorMap, [chartWideFieldVal, LCVal]);\n\n        return {\n          columnName: cn,\n          columnNamed: true, // always named with the field name\n          value,\n          color: chartColorSetting,\n          sheetRow: row,\n        };\n      }),\n    };\n  });\n\n  const chart = {\n    data,\n    chartId,\n    countryIso: selectedIso,\n    hideRowNames: true,\n    // elements: elements,\n    // isPercentage,\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n\n  return chart;\n}\n\nfunction getTable({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  selectedIso,\n}) {\n  const chartConfig = chartConfigsMap[chartId];\n\n  const elements = getElements(chartConfig);\n  const dataPoints = {};\n\n  const isPercentage = getFieldBoolean({\n    chartConfig,\n    field: C.percentage,\n  });\n  _.each(elements, (element) => {\n    const { row, value } = getDataPoint({\n      chartId,\n      element,\n      selectedIso,\n      chartConfigsMap,\n      chartSourceData,\n      // valueParser: isPercentage\n    });\n    dataPoints[element] = value;\n    dataPoints[element + \"_row\"] = row;\n  });\n\n  const rowNames = _.uniq(elements.map((elem) => elem.split(TABLE_DELIN)[0]));\n  const colNames = _.uniq(elements.map((elem) => elem.split(TABLE_DELIN)[1]));\n\n  const data = rowNames.map((rn) => ({\n    rowName: _.get(chartConfig, [`${S._key_}${rn}`, 0, C.displayName], rn),\n    values: colNames.map((cn) => ({\n      columnName: _.get(chartConfig, [`${S._key_}${cn}`, 0, C.displayName], cn),\n      columnNamed: _.get(\n        chartConfig,\n        [`${S._key_}${cn}`, 0, C.displayName],\n        false\n      ),\n      value: _.get(dataPoints, `${rn}${TABLE_DELIN}${cn}`),\n      sheetRow: _.get(dataPoints, `${rn}${TABLE_DELIN}${cn}_row`),\n    })),\n  }));\n\n  const chart = {\n    data,\n    chartId,\n    countryIso: selectedIso,\n    elements: elements,\n    isPercentage,\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n\n  return chart;\n}\n\nfunction getChart({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  selectedIso,\n}) {\n  const chartConfig = chartConfigsMap[chartId];\n\n  const elements = getElements(chartConfig);\n  const visibleElements = elements.filter(\n    (element) => !getFieldBoolean({ element, chartConfig, field: C.hidden })\n  );\n  // console.log(elements);\n\n  // NOTE: currently all charts range over years\n  const year_range = _.get(chartConfig, [S.all, 0, D.year]);\n  const isTimeseries = year_range;\n  const years_arr = isTimeseries ? transformYearRange(year_range) : [S.all];\n  // console.log(years_arr);\n\n  // getchartdata per element\n  const data = _.map(years_arr, (year) => {\n    const dataPoints = {};\n\n    // add non-calculated points\n    _.each(elements, (element) => {\n      if (!!getFormula({ element, chartConfig })) return null;\n      const { row, value } = getDataPoint({\n        chartId,\n        element,\n        year: isTimeseries ? year : null,\n        selectedIso,\n        chartConfigsMap,\n        chartSourceData,\n      });\n      dataPoints[element] = value;\n      dataPoints[element + \"_row\"] = row;\n      dataPoints[element + \"_bounds\"] = getBounds(row);\n    });\n\n    // add calculated points (now that non-calculated constituents have values)\n    _.each(elements, (element) => {\n      if (!getFormula({ element, chartConfig })) return null;\n      const { row, value } = getCalculatedDataPoint({\n        chartId,\n        element,\n        chartConfigsMap,\n        dataPoints,\n      });\n      dataPoints[element] = value;\n      dataPoints[element + \"_row\"] = row;\n    });\n\n    // delete elements used only as constituents in calculations\n    _.each(elements, (element) => {\n      if (getFieldBoolean({ element, chartConfig, field: C.hidden })) {\n        // console.log(\"deleting: \", element);\n        delete dataPoints[element];\n      }\n    });\n    dataPoints.name = year;\n    // console.log(dataPoints);\n    return dataPoints;\n  });\n\n  const elementNameMap = {};\n  _.each(\n    visibleElements,\n    (element) =>\n      (elementNameMap[element] = getField({\n        element,\n        chartConfig: chartConfigsMap[chartId],\n        field: C.displayName,\n      }))\n  );\n\n  const colors = getColors({\n    chartSettings,\n    chartConfig,\n    chartElements: visibleElements,\n  });\n\n  const chart = {\n    data: isTimeseries ? data : data[0],\n    chartId,\n    countryIso: selectedIso,\n    elements: visibleElements,\n    elementNameMap,\n    colors,\n    isPercentage: getFieldBoolean({\n      chartConfig,\n      field: C.percentage,\n    }),\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n\n  return chart;\n}\n// ___ END ASYNC FETCHERS _____\n\n// MAIN FUNCTIONS\n\n/** SITE DATA - runs once on site load */\nexport async function getSiteData() {\n  // if (DISABLED) return [];\n  // CONFIGURE GIDS MAP\n  await setConfigGids().catch((e) => {\n    console.error(\"error in setConfigGids(): \", e);\n  });\n\n  // GRAB STRAIGHT-FORWARD TEXT COPY\n  const cmsDataResults = await Promise.all(\n    CMS_SHEETS.map((sheetName) =>\n      csv(getUrl(GID_MAP[sheetName])).catch((e) =>\n        console.error(`error getting ${sheetName}: `, e)\n      )\n    )\n  );\n  const cmsData = cmsDataResults.reduce((accum, result, idx) => {\n    const sheetName = CMS_SHEETS[idx];\n    accum[sheetName] = result;\n\n    return accum;\n  }, {});\n\n  // const countries = await csv(getUrl(GID_MAP.countries)).catch((e) =>\n  //   console.error(\"error in getcountries: \", e)\n  // );\n\n  // GRAB CONFIGS\n  const { chartConfigsMap, chartIds } = await getChartConfigs().catch((e) =>\n    console.error(\"error in getChartConfigs(): \", e)\n  );\n  console.log(\"@@@ ALL CONFIGS: \");\n  console.log(chartConfigsMap);\n\n  // request all data tabs' data for speedy loading on country selection\n  if (PRE_LOAD_DATA) {\n    const gids = _.map(chartConfigsMap, (config, chartId) =>\n      getSetting({ chartConfigsMap, chartId, field: C.sourceGid })\n    );\n    // console.log(\"gids: \", gids);\n    gids.forEach(memoizedGetAllDataFromTab);\n  }\n\n  return { ...cmsData, chartConfigsMap, chartIds };\n}\n\n/** CREATE CHARTS - whenever selected country changes */\nexport async function getChartData({ chartConfigsMap, chartIds, selectedIso }) {\n  const charts = await getCharts({\n    chartConfigsMap,\n    chartIds,\n    selectedIso\n  }).catch((e) => {\n    console.error(\"error in getCharts(selectedIso): \", e);\n  });\n\n  return { charts };\n}\n","import React from \"react\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n\nexport const CountrySelect = ({\n  handleCountryChange,\n  selectedIso,\n  countries,\n}) => {\n  return (\n    <FormControl sx={{ width: 300, marginTop: 1, marginBottom: 1 }}>\n      <InputLabel id=\"country\">Country</InputLabel>\n      <Select\n        labelId=\"country\"\n        id=\"country-select\"\n        value={selectedIso || \"home\"}\n        label=\"Country\"\n        onChange={handleCountryChange}\n      >\n        <MenuItem value={\"home\"}>\n          {!countries.length ? \"Loading...\" : \"Select a country...\"}\n        </MenuItem>\n        {countries.map(({ iso, name }) => (\n          <MenuItem key={iso} value={iso}>\n            {name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n","import React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport { CountrySelect } from \"./CountrySelect\";\nimport { getRC, headerColor } from \"../consts/colors\";\n\nexport const Header = ({ selectedIso, handleCountryChange, countries }) => {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"fixed\" sx={{ background: getRC(headerColor, 7) }}>\n        <Toolbar>\n          <CountrySelect\n            countries={countries}\n            handleCountryChange={handleCountryChange}\n            selectedIso={selectedIso}\n          />\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n};\n","import React from \"react\";\n// import './styles.css'\nimport _ from \"lodash\";\n\nconst BUFFER_RATIO = 0.2;\nconst TEXT_BUFFER_RATIO = 0.1;\nconst DEFAULT_RATIO = 0.7;\nconst FONT_SIZE_RATIO = 0.1;\nconst HEADER_FONT_SIZE_RATIO = 0.16;\nconst LINE_HEIGHT = 1.1;\nconst CAP_VALUE = null;\n\nconst innerTextGetter = (ratio, { capValue }) => {\n  return !ratio\n    ? \"Unknown %\"\n    : capValue && ratio > capValue\n    ? `>${capValue * 100}%`\n    : `${Math.round(ratio * 100)}%`;\n};\n\nconst NestedBoxes = ({\n  ratios,\n  fillColors,\n  textColors,\n  content,\n  firstSide = 100,\n  horizontal = true,\n  classes = \"\",\n  getInnerText = innerTextGetter,\n  bufferRatio = BUFFER_RATIO,\n  textBufferRatio = TEXT_BUFFER_RATIO,\n  defaultRatio = DEFAULT_RATIO,\n  capValue = CAP_VALUE,\n  fontSizeRatio = FONT_SIZE_RATIO,\n  headerFontSizeRatio = HEADER_FONT_SIZE_RATIO,\n  lineHeight = LINE_HEIGHT,\n}) => {\n  const resolveOrientation = (v1, v2) => {\n    return horizontal ? v2 : v1;\n  };\n\n  const bufferDistance = firstSide * (1 + bufferRatio);\n  const textBufferDistance = firstSide * (1 + textBufferRatio);\n\n  let side = firstSide;\n  let x = 0;\n  let y = 0;\n\n  const fontSize = firstSide * fontSizeRatio;\n  const headerFontSize = firstSide * headerFontSizeRatio;\n\n  const rects = [];\n  const texts = [];\n  const connectingLines = [];\n\n  _.each(ratios, (ratio, i) => {\n    // const noRatio = !ratio\n    const innerText = getInnerText(ratio, { capValue });\n    ratio = ratio || defaultRatio;\n\n    if (capValue && ratio > capValue) {\n      ratio = capValue;\n    }\n\n    const colorOuter = fillColors[i];\n    const colorInner = fillColors[i + 1];\n    const textColor = textColors[i + 1];\n\n    // add outer box\n    rects.push(\n      <rect\n        key={\"rect1-\"+i}\n        x={resolveOrientation(x, y)}\n        y={resolveOrientation(y, x)}\n        width={side}\n        height={side}\n        fill={colorOuter}\n      />\n    );\n\n    const { below = [] } = _.get(content, i, {});\n    const text = (\n      <text\n        key={\"text-\"+i}\n        fontSize={fontSize}\n        // set the initial y for all tspans\n        // the x we set on each individually so they don't try to go one after another\n        y={resolveOrientation(y + fontSize, textBufferDistance + fontSize)}\n      >\n        <tspan\n          className=\"percent\"\n          x={resolveOrientation(textBufferDistance, y)}\n          style={{ fill: textColor, fontSize: headerFontSize }}\n        >\n          {innerText}\n        </tspan>\n        {below.map((txt, j) => (\n          <tspan\n            key={i + j}\n            className=\"description\"\n            x={resolveOrientation(textBufferDistance, y)}\n            dy={fontSize * lineHeight}\n          >\n            {txt}\n          </tspan>\n        ))}\n      </text>\n    );\n    texts.push(text);\n\n    let nextSide = side * ratio;\n    const borderWidth = (side - nextSide) / 2; // the amount of outer box that shows around the inner box\n    x += borderWidth;\n    y += borderWidth;\n    side = nextSide;\n\n    // add inner box\n    rects.push(\n      <rect\n        key={\"rect2-\"+i}\n        x={resolveOrientation(x, y)}\n        y={resolveOrientation(y, x)}\n        width={side}\n        height={side}\n        fill={colorInner}\n      />\n    );\n\n    if (i === ratios.length - 1) {\n      return;\n    }\n\n    const lineStyle = {\n      strokeWidth: \".4\",\n      strokeDasharray: \".8 1\",\n    };\n    // if there's another box coming, add lines to it\n    const line1 = (\n      <line\n        key={\"line1-\"+i}\n        style={lineStyle}\n        stroke={colorInner}\n        x1={resolveOrientation(x, y + side)}\n        x2={resolveOrientation(x, y + bufferDistance)}\n        y1={resolveOrientation(y + side, x)}\n        y2={resolveOrientation(y + bufferDistance, x)}\n      />\n    );\n    const line2 = (\n      <line\n        key={\"line2-\"+i}\n        style={lineStyle}\n        stroke={colorInner}\n        x1={resolveOrientation(x + side, y + side)}\n        x2={resolveOrientation(x + side, y + bufferDistance)}\n        y1={resolveOrientation(y + side, x + side)}\n        y2={resolveOrientation(y + bufferDistance, x + side)}\n      />\n    );\n    connectingLines.push(line1, line2);\n\n    // and shift down for the next\n    y += bufferDistance;\n  });\n\n  const totalX = firstSide + (textBufferDistance + firstSide); // (text width)\n  const totalY = y + firstSide;\n  const totalXh = y + bufferDistance;\n  const totalYh = textBufferDistance + (headerFontSize + fontSize * 5); // (text height)\n\n  const classNames = \"nested-boxes \" + classes;\n\n  return (\n    <div className={classNames}>\n      {/* <p className='title'>{title}</p> */}\n      <svg\n        viewBox={`0 -2 ${resolveOrientation(\n          totalX,\n          totalXh\n        )} ${resolveOrientation(totalY, totalYh)}`}\n      >\n        {rects}\n        {texts}\n        {connectingLines}\n      </svg>\n    </div>\n  );\n};\n\nexport default NestedBoxes;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  AreaChart,\n  Area,\n  ComposedChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LineChart,\n  Line,\n  ResponsiveContainer,\n  Legend,\n} from \"recharts\";\nimport { Box, useTheme } from \"@mui/system\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport NestedBoxes from \"./NestedBoxes\";\nimport {\n  getRC,\n  strokeIntensity,\n  fillIntensity,\n  themePrimary,\n  themeSecondary,\n} from \"../consts/colors\";\nimport { displayNumber, displayPercent } from \"../utils/display\";\nimport {\n  CONFIG_FIELDS as C,\n  DATA_FIELDS as D,\n  GENERATED_FIELDS as G,\n  MULTI_LINE_TEXT_DELIN,\n} from \"../consts/data\";\nimport { useMediaQuery } from \"@mui/material\";\n\n// TODO: standardize / create sane system for styles\n// TODO: CLEAN / EXTRACt this and other components\nconst CustomTooltip = ({ active, payload, label, isArea }) => {\n  if (active && payload && payload.length) {\n    // if lines, stack legend to match line height order\n    const payloads = isArea ? payload : _.sortBy(payload, \"value\");\n\n    let source = null;\n    return (\n      <Box sx={{ background: \"white\", p: 2 }} className=\"custom-tooltip\">\n        <strong className=\"label\">{label}</strong>\n        {payloads.reverse().map((p) => {\n          if (p.dataKey.includes(\"_bounds\")) return;\n\n          const bounds = _.get(p.payload, p.dataKey + \"_bounds\", []);\n          const formattedBounds = [D.value_lower, D.value_upper].map((F, i) =>\n            _.get(\n              p.payload,\n              [p.dataKey + \"_row\", `DISPLAY_${F.toUpperCase()}`],\n              bounds[i]\n            )\n          );\n\n          const v = _.get(\n            p.payload,\n            [p.dataKey + \"_row\", G.DISPLAY_VALUE],\n            p.value\n          );\n          // console.log(\"$$$\", v, p.payload);\n\n          // use first source\n          source =\n            source ||\n            _.get(p.payload, [p.dataKey + \"_row\", D.source_display]) ||\n            _.get(p.payload, [p.dataKey + \"_row\", D.source_database]);\n\n          return (\n            <Typography key={p.dataKey}>\n              <svg\n                width=\"18\"\n                viewBox=\"0 0 160 100\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <circle cx=\"50\" cy=\"50\" r=\"50\" fill={p.fill}></circle>\n              </svg>\n              {p.name}: {v}{\" \"}\n              {!!bounds.length && `(${formattedBounds.join(\" - \")})`}\n            </Typography>\n          );\n        })}\n        {source && (\n          <>\n            <br />\n            <u>Source</u>: {source}\n          </>\n        )}\n      </Box>\n    );\n  } else return null;\n};\n\nexport const Charts = ({ selectedIso, chartData, countries }) => {\n  const [hiddenElements, setHiddenElements] = React.useState({});\n\n  const getLineChart = (chart) => {\n    const {\n      data,\n      chartId,\n      elements,\n      type,\n      isPercentage,\n      colors,\n      elementNameMap,\n    } = chart;\n    const isArea = type === \"area\";\n    const [, ElementComponent] = isArea ? [AreaChart, Area] : [LineChart, Line];\n\n    const formatter = isPercentage\n      ? (v) => displayPercent(v)\n      : (v) => displayNumber(v);\n\n    const getName = (elem) => _.get(elementNameMap, elem, elem);\n\n    const onLegendClick = (e) => {\n      console.log(e.dataKey);\n      const hiddenMap = _.cloneDeep(hiddenElements);\n      const hidden = _.get(hiddenMap, [chartId, e.dataKey], false);\n      _.set(hiddenMap, [chartId, e.dataKey], !hidden);\n      setHiddenElements(hiddenMap);\n    };\n\n    return (\n      <ResponsiveContainer\n        // needed for proper resizing https://github.com/recharts/recharts/issues/172#issuecomment-307858843\n        width=\"99%\"\n        aspect={1.25}\n        // height={400}\n        maxHeight={400}\n        // maxWidth={600}\n      >\n        <ComposedChart\n          // width={500}\n          // height={400}\n          data={data}\n          margin={{\n            top: 30,\n            right: 30,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis\n            width={80}\n            domain={isPercentage ? [0, 100] : undefined}\n            tickFormatter={formatter}\n          />\n          <Tooltip\n            cursor={{ stroke: getRC(themeSecondary, 10), strokeWidth: 1 }}\n            content={<CustomTooltip isArea={isArea} />}\n          />\n          <Legend\n            onClick={onLegendClick}\n            iconSize={isArea ? 8 : 14}\n            iconType={isArea && \"circle\"}\n          />\n          {elements.map((elem, i) => {\n            const isBounded =\n              !isArea &&\n              _.some(data, (d) => _.get(d, [elem + \"_bounds\"], []).length);\n            if (!isBounded) return null;\n            return (\n              <Area\n                key={i + \"_b\"}\n                // type=\"step\"\n                dataKey={elem + \"_bounds\"}\n                hide={_.get(hiddenElements, [chartId, elem], false)}\n                // stackId={i + 1}\n                legendType=\"none\"\n                tooltipType=\"none\"\n                stroke={getRC(colors[i], strokeIntensity - 3)}\n                fill={getRC(colors[i], fillIntensity - 3)}\n              />\n            );\n          })}\n          {elements.map((elem, i) => (\n            <ElementComponent\n              key={i}\n              // type=\"monotone\"\n              // dataBounds={_.get(elem, [elem + \"_bounds\"], [])}\n              dataKey={elem}\n              name={getName(elem)}\n              hide={_.get(hiddenElements, [chartId, elem], false)}\n              stackId={isArea ? 1 : i + 1000}\n              stroke={getRC(colors[i], strokeIntensity)}\n              fill={getRC(colors[i], fillIntensity)}\n            />\n          ))}\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  const getTable = (chart) => {\n    const { data, hideRowNames } = chart;\n\n    const firstRow = data[0];\n\n    // TODO: empty row? skip title?\n    if (!firstRow) return null;\n    // const columnsNamed = _.some(data[0][\"values\"], \"columnNamed\");\n    const headers =\n      // columnsNamed &&\n      firstRow[\"values\"].map(({ columnName, columnNamed }) => (\n        <TableCell scope=\"col\" key={columnName}>\n          {columnNamed && columnName}\n        </TableCell>\n      ));\n\n    const rows = data.map(({ rowName, values }) => (\n      <TableRow key={rowName}>\n        {!hideRowNames && (\n          <TableCell scope=\"row\" component=\"th\">\n            {rowName}\n          </TableCell>\n        )}\n        {values.map(({ value, columnName, sheetRow, color }) => (\n          <TableCell\n            key={columnName}\n            sx={{\n              background: color,\n            }}\n          >\n            {/*  */}\n            {/* {_.get(sheetRow, G.DISPLAY_VALUE, value) || \"N/A\"} (move to getData?) */}\n            {/* to not overwrite \"\" with \"N/A\":  */}\n            {_.get(sheetRow, G.DISPLAY_VALUE, _.get([value], 0, \"N/A\"))}\n            {/* {(value && (sheetRow && sheetRow[G.DISPLAY_VALUE] || value)) || \"N/A\"} */}\n          </TableCell>\n        ))}\n      </TableRow>\n    ));\n\n    return (\n      <ResponsiveContainer>\n        <TableContainer>\n          <Table\n            sx={{\n              \"& tbody tr:nth-of-type(odd)\": {\n                background: getRC(themePrimary, 6),\n              },\n              \"& td, & thead th\": {\n                textAlign: \"right\",\n              },\n              \"& th\": {\n                fontWeight: \"bold\",\n                minWidth: \"60px\",\n              },\n            }}\n          >\n            <TableHead>\n              <TableRow>\n                {!hideRowNames && <TableCell scope=\"col\"></TableCell>}\n                {headers}\n              </TableRow>\n            </TableHead>\n            <TableBody>{rows}</TableBody>\n          </Table>\n        </TableContainer>\n      </ResponsiveContainer>\n    );\n  };\n\n  const getNested = (chart) => {\n    const theme = useTheme();\n    const isSm = useMediaQuery(theme.breakpoints.down(\"sm\"));\n    const isXl = useMediaQuery(theme.breakpoints.up(\"md\"));\n    const { data, elements, colors, elementNameMap } = chart;\n    const xl = false;\n    // console.log(radColors);\n    const ratios = elements.map((el) => {\n      const val = data[el];\n      return val && val / 100;\n    });\n    const content = elements.map((el) => {\n      const text = elementNameMap[el];\n      return { below: text.split(MULTI_LINE_TEXT_DELIN) };\n    });\n    // console.log(ratios);\n    return (\n      <>\n        <NestedBoxes\n          // circle={true}\n          // classes={xl ? \"xl\" : \"\"}\n          title={\"title\"}\n          bufferRatio={!isSm ? 0.8 : 0.2}\n          lineHeight={!isSm ? 1.4 : 1.1}\n          textBufferRatio={0.2}\n          firstSide={20}\n          horizontal={!isSm}\n          ratios={ratios}\n          fillColors={colors.map((c) => getRC(c, 8))}\n          textColors={colors.map((c) => getRC(c, 9))}\n          content={content}\n        />\n        <br />\n      </>\n    );\n  };\n\n  const getIntro = (chart) => {\n    const country = countries.find((c) => c.iso === selectedIso);\n    return (\n      <>\n        <Typography\n          variant=\"h2\"\n          component=\"h1\"\n          sx={{\n            fontWeight: 500,\n            lineHeight: 1,\n            fontSize: { lg: \"6rem\" },\n            maxWidth: { lg: 760, xl: \"100%\" },\n            mb: { sm: 1, lg: 2 },\n          }}\n        >\n          {country && country.name}\n        </Typography>\n        <Box\n          sx={{\n            display: { sm: \"flex\" },\n            \"& dl:not(:last-child)\": { mr: { sm: 4, md: 10 } },\n            \"& dt h2\": {\n              fontWeight: 100,\n              letterSpacing: \".8px\",\n              textTransform: \"uppercase\",\n            },\n            \"& dt, dd\": { m: 0 },\n          }}\n        >\n          {chart.elements.map((elem) => {\n            return (\n              <dl key={elem}>\n                <dt>\n                  <Typography variant=\"h6\" component=\"h2\">\n                    {_.get(\n                      chart,\n                      [\"textValues\", `${elem}_row`, G.DISPLAY_NAME],\n                      \"\"\n                    )}\n                  </Typography>\n                </dt>\n                <dd>\n                  <Typography variant=\"h4\" component=\"h2\">\n                    {_.get(\n                      chart,\n                      [\"textValues\", `${elem}_row`, G.DISPLAY_VALUE],\n                      chart.textValues[elem]\n                    )}\n                  </Typography>\n                </dd>\n              </dl>\n            );\n          })}\n        </Box>\n      </>\n    );\n  };\n\n  const getChart = (chart) => {\n    // TODO: simplify\n    if (!chart) return null;\n    const { type, chartId, name } = chart;\n\n    // if (type === \"text\") {\n    if (chartId === \"intro\") {\n      return (\n        <Box\n          sx={{\n            // background: { xs: \"red\", sm: \"blue\", md: \"green\", lg: \"yellow\", xl: \"purple\" },\n            flexBasis: { xs: \"100%\", xl: 600 },\n            flexGrow: { xl: 0 },\n            p: 3,\n            // display: {md: \"flex\"},\n          }}\n          key={chartId}\n        >\n          {getIntro(chart)}\n        </Box>\n      );\n    }\n\n    if (type === \"table\" || type === \"table_list\") {\n      return (\n        <Box sx={{ flexBasis: \"100%\", maxWidth: 864, p: 3 }} key={chartId}>\n          <Typography variant=\"h5\" component=\"h3\">\n            {name}\n          </Typography>\n          {getTable(chart)}\n        </Box>\n      );\n    }\n\n    if (type === \"nested\") {\n      return (\n        <>\n          <Box\n            sx={{\n              flexBasis: { xs: \"100%\", xl: 700 },\n              flexGrow: { xl: 1 },\n              flexShrink: { xl: 1 },\n              mr: \"auto\",\n              ml: { xl: \"auto\" },\n              maxWidth: 864,\n              p: 3,\n            }}\n            key={chartId}\n          >\n            <Typography pb={3} variant=\"h5\" component=\"h3\">\n              {name}\n            </Typography>\n            {getNested(chart)}\n          </Box>\n          <Box sx={{ flexBasis: \"100%\", height: 0 }} />\n        </>\n      );\n    }\n    // if (chart.type === \"area\") return getAreaChart(chart);\n    return (\n      <Box\n        key={chartId}\n        sx={{\n          width: \"100%\",\n          maxWidth: { md: \"44%\", xl: \"29%\" },\n          p: 3,\n        }}\n      >\n        <Typography variant=\"h5\" component=\"h3\">\n          {name}\n        </Typography>\n        {getLineChart(chart)}\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      pt={8}\n      sx={{\n        justifyContent: { xs: \"space-evenly\", md: \"space-between\" },\n      }}\n    >\n      {chartData.map((c, i) => <div key={i}>{getChart(c)}</div>)}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { Typography } from \"@mui/material\";\nimport { CMS_FIELDS } from \"../consts/data\";\n\nexport const HomePage = ({ homeCopy }) => {\n  if (!homeCopy || !homeCopy.length) return null; // TODO: spinner\n  // console.log(homeCopy, homeCopy && homeCopy[0]);\n  const tapFields = Object.keys(homeCopy[0]).filter((f) =>\n    f.startsWith(CMS_FIELDS.TAP)\n  );\n\n  const getTapList = (f) => {\n    return (\n      <Box\n        key={f}\n        sx={{\n          background: \"#f2c2b4\",\n          p: 1,\n          m: 1,\n          borderRadius: \"8px\",\n          // flexBasis: \"250px\",\n          height: \"100%\",\n        }}\n      >\n        {/* <b>{f.replace(CMS_FIELDS.TAP, \"\")}</b> */}\n        <Typography\n          variant=\"body1\"\n          sx={{\n            fontSize: { sm: \"smaller\", md: \"unset\" },\n          }}\n          variant=\"h7\"\n          component=\"h3\"\n          dangerouslySetInnerHTML={{\n            __html: f.replace(CMS_FIELDS.TAP, \"\"),\n          }}\n        />\n        <ul\n          style={{\n            // listStyle: \"none\",\n            paddingInlineStart: \"20px\",\n          }}\n        >\n          {homeCopy.map(\n            (row, i) =>\n              !!row[f] && (\n                <li key={row[f]}>\n                  <Typography\n                    variant=\"body1\"\n                    key={i}\n                    // sx={{ maxWidth: 600, margin: \"auto\" }}\n                    // pt={2}\n                    sx={{\n                      fontSize: { sm: \"smaller\", md: \"unset\" },\n                    }}\n                    // px={3}\n                    dangerouslySetInnerHTML={{\n                      __html: row[f],\n                    }}\n                  />\n                </li>\n              )\n          )}\n        </ul>\n      </Box>\n    );\n  };\n\n  return (\n    <Box pt={\"72px\"} px={3}>\n      {/* todo: constify header height */}\n      <Box>\n        {homeCopy.map(\n          (row, i) =>\n            !!row[CMS_FIELDS.blurb] && (\n              <Typography\n                variant=\"body1\"\n                key={i}\n                sx={{\n                  fontSize: { sm: \"smaller\", md: \"unset\" },\n                }}\n                // sx={{ maxWidth: 600, margin: \"auto\" }}\n                pt={1}\n                // px={3}\n                dangerouslySetInnerHTML={{\n                  __html: row[CMS_FIELDS.blurb],\n                }}\n              />\n            )\n        )}\n      </Box>\n      <Box py={5} className=\"tap-lists-container\">\n        <Typography\n          variant=\"h6\"\n          component=\"h2\"\n          dangerouslySetInnerHTML={{\n            __html: \"Technical Assistance Providers\",\n          }}\n        />\n        <Box\n          className=\"tap-lists\"\n          sx={{\n            display: { sm: \"flex\" },\n          }}\n        >\n          {tapFields.map((f) => getTapList(f))}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { Typography, useTheme } from \"@mui/material\";\nimport { CMS_FIELDS as M } from \"../consts/data\";\nimport { transformLink } from \"../utils/display\";\n\nexport const Dictionary = ({ dictionary }) => {\n  const theme = useTheme();\n  return (\n    <Box\n      sx={{\n        px: { xs: 3, lg: 10 },\n        mx: { lg: 5 },\n        mb: { lg: 5 },\n        py: 9,\n        mt: 9,\n        background: theme.palette.background.paper,\n\n        \"& dl\": {\n          display: \"inline-block\",\n          width: \"100%\",\n          mt: 0,\n          mb: { lg: 3 },\n          fontSize: 15,\n        },\n        \"& dd\": { ml: 0, mt: { xs: 1 }, fontSize: 13 },\n      }}\n    >\n      <Typography\n        variant=\"h6\"\n        component=\"h2\"\n        dangerouslySetInnerHTML={{\n          __html: \"Glossary\",\n        }}\n      />\n      <Box\n        sx={{\n          columnCount: { md: 2, xl: 3 },\n          columnGap: { xs: \"2rem\", lg: \"5rem\" },\n          mt: 3,\n        }}\n      >\n        {dictionary\n          .sort((a, b) => a.term.toLowerCase() > b.term.toLowerCase())\n          .map(({ [M.term]: term, [M.definition]: definition }) => {\n            return (\n              <dl key={term}>\n                <dt>\n                  <strong>{term}</strong>\n                </dt>\n                <dd>\n                  <Typography\n                    // sx={{ maxWidth: \"500px\" }}\n                    dangerouslySetInnerHTML={{\n                      __html: transformLink(definition),\n                    }}\n                  />\n                </dd>\n              </dl>\n            );\n          })}\n      </Box>\n    </Box>\n  );\n};\n","// import \"./styles.css\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { getSiteData, getChartData } from \"../getData\";\nimport { themePrimary, radColors, getRC } from \"../consts/colors\";\nimport { Container, Paper, Typography, useTheme } from \"@mui/material\";\nimport { Header } from \"./Header\";\nimport { Charts } from \"./Charts\";\nimport { Box } from \"@mui/system\";\nimport { transformLink } from \"../utils/display\";\nimport { HomePage } from \"./HomePage\";\nimport { Dictionary } from \"./Dictionary\";\n\nconst SHOW_COLORS = false;\n\nexport default function App() {\n  const [selectedIso, setIso] = React.useState(null);\n  const [chartData, setChartData] = React.useState([]);\n\n  const [dictionary, setDictionary] = React.useState([]);\n  const [countries, setCountries] = React.useState([]);\n  const [homeCopy, setHomeCopy] = React.useState([]);\n  const [chartIds, setChartIds] = React.useState([]);\n  const [chartConfigsMap, setChartConfigsMap] = React.useState(null);\n\n  // on page load, get site-wide data\n  React.useEffect(() => {\n    getSiteData().then((result) => {\n      setDictionary(result.dictionary.filter((d) => d.term && d.definition));\n      setCountries(result.countries.filter((c) => c.iso && c.name));\n      setHomeCopy(result.homecopy);\n      setChartIds(result.chartIds);\n      setChartConfigsMap(result.chartConfigsMap);\n    });\n  }, []);\n\n  // on country selection change, get country-specific chart data\n  React.useEffect(() => {\n    if (!selectedIso) return;\n    getChartData({ chartConfigsMap, chartIds, selectedIso }).then((result) => {\n      console.log(\"@@@ ALL DATA: \");\n      console.log(result.charts);\n      setChartData(result.charts);\n    });\n  }, [selectedIso]);\n\n  const updateCountry = (e) => {\n    const value = e.target.value;\n    const realIso = _.some(countries, ({ iso }) => iso === value);\n    setIso(realIso ? value : null);\n  };\n\n  // console.log(\"*\", chartData);\n  const loading = !_.some(chartData, (c) => c && c.countryIso === selectedIso);\n\n  const theme = useTheme();\n  return (\n    <Paper\n      elevation={0}\n      sx={{\n        // keep in sync with index.html background\n        background: getRC(themePrimary, 3),\n        color: getRC(themePrimary, 12),\n        fontFamily: theme.typography.fontFamily,\n        p: { lg: 6 },\n      }}\n    >\n      <Header\n        countries={countries}\n        handleCountryChange={updateCountry}\n        selectedIso={selectedIso}\n      />\n      <br />\n\n      {!selectedIso ? (\n        <HomePage homeCopy={homeCopy} />\n      ) : loading ? (\n        <Box pt={\"50vh\"}>\n          <Typography\n            variant=\"body1\"\n            sx={{ textAlign: \"center\" }}\n            dangerouslySetInnerHTML={{\n              __html: \"loading...\",\n            }}\n          />\n        </Box>\n      ) : (\n        <Charts\n          countries={countries}\n          selectedIso={selectedIso}\n          chartData={chartData}\n        />\n      )}\n      {!!dictionary.length && !loading && (\n        <Dictionary dictionary={dictionary} />\n      )}\n      {SHOW_COLORS &&\n        radColors.map((rc) => (\n          <>\n            <br></br>\n            {_.map(Object.keys(radColors[0]), (meh, idx) => (\n              <span\n                style={{\n                  background: getRC(rc, idx + 1),\n                  height: \"70px\",\n                  width: \"70px\",\n                  display: \"inline-block\",\n                  textAlign: \"center\",\n                }}\n              >\n                {idx + 1}\n              </span>\n            ))}\n            {Object.keys(rc)[0].replace(/\\d/, \"\")}\n          </>\n        ))}\n    </Paper>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./components/App\";\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { getRC, themePrimary, themeSecondary } from \"./consts/colors\";\n// import { red } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: getRC(themePrimary, 11),\n    },\n    secondary: {\n      main: getRC(themeSecondary, 8),\n    },\n  },\n  typography: {\n    fontFamily: [\n      'Archivo',\n      'sans-serif',\n    ].join(','),\n  },\n});\n\nfunction ThemedApp() {\n  return <ThemeProvider theme={theme}><App /></ThemeProvider>;\n}\n\n\nconst rootElement = document.getElementById(\"root\");\nrender(<ThemedApp />, rootElement);\n","// export CONSTS\nexport const DISABLED = false;\nexport const PRE_LOAD_DATA = true;\nexport const TABLE_DELIN = \"__\";\nexport const MULTI_LINE_TEXT_DELIN = \"__\";\n\n// sheets we can just grab copy directly from\nexport const CMS_SHEETS = [\"dictionary\", \"countries\", \"homecopy\"];\n// these are set in the home sheet for version controlability\nexport const CONFIGURABLE_GID_NAMES = [\"configs\", ...CMS_SHEETS];\n// gids pointing to Sheet tabs\nexport const GID_MAP = {\n  home: \"0\",\n  // configs: null,\n  // dictionary: null,\n  // countries: null,\n  // homepage: null,\n};\n\n// now extracted from chart configs sheet\n// export const chartIds = [\n//   \"p95\",\n//   \"plhiv_diagnosis\",\n//   \"late_hiv\",\n//   \"plhiv_art\",\n//   \"new_art\",\n//   \"plhiv_suppressed\",\n//   \"testing_coverage\",\n//   \"key_populations\",\n//   \"policy_compliance\",\n// ];\n\n// MAPS TO SPREADSHEET COLUMN NAMES:\n// CONFIG SHEET - identifier fields (ie non-data fields)\nexport const CONFIG_FIELDS = {\n  chartId: \"chart_id\",\n  sourceGid: \"source_gid\",\n  element: \"element\",\n  displayName: \"display_name\",\n  capPercentage: \"cap_percentage\",\n  percentageDecimals: \"percentage_decimals\",\n  coarseIntegerFormatting: \"coarse_integer_formatting\",\n  colorOverride: \"color_override\",\n  chartType: \"chart_type\",\n  modelled: \"modelled\",\n  formula: \"formula\",\n  hidden: \"hidden\",\n  valueField: \"value_field\",\n  percentage: \"percentage\",\n};\n\n// DATA SHEETS - data fields (fields that configs can filter by)\nexport const DATA_FIELDS = {\n  // we preserve snake_case as a reminder that these are essentially database fields\n  country_iso_code: \"country_iso_code\",\n  sourceYear: \"source_year\",\n  value: \"value\",\n  year: \"year\",\n  indicator: \"indicator\",\n  indicator_description: \"indicator_description\",\n  sex: \"sex\",\n  age: \"age\",\n  population_segment: \"population_segment\",\n  population_sub_group: \"population_sub_group\",\n  country_name: \"country_name\",\n  area_name: \"area_name\",\n  geographic_scope: \"geographic_scope\",\n  value_upper: \"value_upper\",\n  value_lower: \"value_lower\",\n  value_comment: \"value_comment\",\n  unit_format: \"unit_format\",\n  source_organization: \"source_organization\",\n  source_database: \"source_database\",\n  source_display: \"source_display\",\n  notes: \"notes\",\n  modality: \"modality\",\n  modality_category: \"modality_category\",\n  import_file: \"import_file\",\n  import_timestamp: \"import_timestamp\",\n  row_id: \"row_id\",\n  suppressed: \"suppressed\",\n  Deliverable: \"Deliverable\",\n  Supplier: \"Supplier\",\n\n  REGEX: {\n    quarter: /Q\\d\\s\\d{4}/,\n  },\n};\n\n// values in the config Sheet that hold special meanings\n// see also SPECIAL_FILTERS_MAP\nexport const SPECIAL_VALUES = {\n  all: \"all\",\n  _key_: \"_key_\",\n  _color_by_: \"_color_by_\",\n};\n\n// fields used in the \"cms\" sheets (countries, dictionary, etc)\nexport const CMS_FIELDS = {\n  // dictionary\n  term: \"term\",\n  definition: \"definition\",\n  // countries\n  iso: \"iso\",\n  name: \"name\",\n  // homecopy\n  blurb: \"blurb\",\n  TAP: \"_TAP_\", // prefix to fields for the Technical Assistance Provider fields\n};\n\n// GENERATED FIELDS - fields we add for the app\nexport const GENERATED_FIELDS = {\n  // we use UPPER_CASE to distinguish from actual \"database\" fields from the Sheet\n  DISPLAY_NAME: \"DISPLAY_NAME\",\n  DISPLAY_VALUE: \"DISPLAY_VALUE\",\n  DISPLAY_VALUE_LOWER: `DISPLAY_${DATA_FIELDS.value_lower.toUpperCase()}`,\n  DISPLAY_VALUE_UPPER: `DISPLAY_${DATA_FIELDS.value_upper.toUpperCase()}`,\n};\n","import _ from \"lodash\";\n\nexport const capValue = (v, options = {}) => {\n  v = Number(v);\n  // !_.isEmpty(options) && console.log(\"cvOPTIONS: \", v, options);\n  if (options.cap) return Math.min(v, Number(options.cap));\n  return v;\n};\n\nexport const displayPercent = (v, options = {}) => {\n  // !_.isEmpty(options) && console.log(\"OPTIONS: \", v, options);\n  v = Number(v);\n  if (!isFinite(v)) return \"NA\";\n  if (options.cap && v > Number(options.cap)) {\n    const x = `>${options.cap}%`;\n    // console.log(\"!!!!\", x, v, options.cap);\n    return x;\n  }\n  if (v > 100) console.warn(\"Incorrect %\");\n\n  const decimals = options.decimals || 0;\n  return _.round(v, decimals).toString() + \"%\";\n};\n\nexport const displayNumber = (v, options = {}) => {\n  v = Number(v);\n  if (options.coarseFormatting) {\n    if (v > 1000000000) {\n      return _.round(v / 1000000000, 1).toString() + \" billion\";\n    } else if (v > 1000000) {\n      return _.round(v / 1000000, 1).toString() + \" million\";\n    } else if (v < 100) {\n      return \"<100\";\n    } else if (v < 200) {\n      return \"<200\";\n    } else if (v < 500) {\n      return \"<500\";\n    } else if (v < 1000) {\n      return \"<1000\";\n    } else {\n      v = Number(v.toPrecision(2));\n    }\n  }\n\n  // insert spaces rather than commas\n  return v.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1 \");\n};\n\nexport const transformLink = (t) =>\n  t.replaceAll(\"<a \", \"<a target='_blank' rel='noopener noreferrer'\");\n"],"sourceRoot":""}