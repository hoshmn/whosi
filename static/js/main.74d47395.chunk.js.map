{"version":3,"sources":["consts/colors.js","utils/data.js","getData.js","components/CountrySelect.jsx","components/Header.jsx","components/NestedBoxes.jsx","components/Charts.jsx","components/HomePage.jsx","components/Dictionary.jsx","components/App.jsx","index.jsx","utils/display.js","consts/data.js"],"names":["themePrimary","sand","themeSecondary","indigo","headerColor","gold","colorGroups","orange","grass","plum","tomato","sky","brown","violet","fillIntensity","strokeIntensity","radColors","red","crimson","pink","purple","blue","cyan","teal","green","mint","lime","yellow","amber","gray","mauve","slate","sage","olive","bronze","getRC","radColor","idx","Object","keys","replace","SPECIAL_FILTERS_MAP","_NONE_","_","negate","identity","_SOMETHING_","_ANY_","stubTrue","defaultCompFn","cellVal","filterVal","toLowerCase","getUrl","gid","configParser","row","C","chartId","each","value","key","filterByCountryGenerator","selectedIso","D","country_iso_code","getElements","chartConfig","filter","k","startsWith","getSetting","element","chartConfigsMap","field","get","getField","getFieldBoolean","getFormula","formula","getBounds","value_lower","vLower","value_upper","vUpper","parseFloat","getColors","chartSettings","chartElements","visibleElements","groupIdx","parseInt","Math","abs","colorOverride","length","baseColors","colors","map","chartType","push","transformYearRange","range","result","exec","y1","y2","String","getFilter","year","allChartsFilter","allElementsFilter","elementFilter","backupFilters","getRow","chartSourceData","matchingRows","every","maxBy","r","Number","sourceYear","getDataPoint","valueField","displayName","set","G","DISPLAY_NAME","capAndFormat","displayValue","percentage","options","cap","capPercentage","decimals","percentageDecimals","displayPercent","capValue","forEach","F","v","toUpperCase","cv","coarseFormatting","coarseIntegerFormatting","displayNumber","DISPLAY_VALUE","getCalculatedDataPoint","dataPoints","rawFormula","convertedFormula","eval","error","console","warn","test","isNumber","memoizedGetAllDataFromTab","memoize","async","csv","catch","e","getCharts","chartIds","Promise","all","sourceGid","d","getCountryDataFromTab","getterMap","table","getTable","text","getText","getChart","getter","getChartOrTable","log","elements","textValues","countryIso","type","name","isPercentage","rowNames","uniq","elem","split","TABLE_DELIN","colNames","data","rn","values","cn","column","columnNamed","sheetRow","hidden","year_range","isTimeseries","years_arr","elementNameMap","getSiteData","CONFIGURABLE_GID_NAMES","GID_MAP","homeRows","home","lastConfiguredRow","findLast","setConfigGids","cmsData","CMS_SHEETS","sheetName","reduce","accum","baseConfigs","configs","shaped","groupBy","uniqBy","c","chart_id","id","mapValues","configParams","elemDetails","elementName","getChartConfigs","PRE_LOAD_DATA","config","CountrySelect","handleCountryChange","countries","FormControl","sx","width","marginTop","marginBottom","InputLabel","Select","labelId","label","onChange","MenuItem","iso","Header","Box","flexGrow","AppBar","position","background","Toolbar","BUFFER_RATIO","TEXT_BUFFER_RATIO","DEFAULT_RATIO","FONT_SIZE_RATIO","HEADER_FONT_SIZE_RATIO","LINE_HEIGHT","CAP_VALUE","innerTextGetter","ratio","round","NestedBoxes","ratios","fillColors","textColors","content","firstSide","horizontal","classes","getInnerText","bufferRatio","textBufferRatio","defaultRatio","fontSizeRatio","headerFontSizeRatio","lineHeight","resolveOrientation","v1","v2","bufferDistance","textBufferDistance","side","x","y","fontSize","headerFontSize","rects","texts","connectingLines","i","innerText","colorOuter","colorInner","textColor","height","fill","below","className","style","txt","j","dy","nextSide","borderWidth","lineStyle","strokeWidth","strokeDasharray","line1","stroke","x1","x2","line2","totalX","totalY","totalXh","totalYh","classNames","viewBox","CustomTooltip","active","payload","isArea","payloads","sortBy","source","p","reverse","dataKey","includes","bounds","formattedBounds","source_display","source_database","Typography","xmlns","cx","cy","join","Charts","chartData","hiddenElements","setHiddenElements","React","useState","getLineChart","chart","ElementComponent","AreaChart","Area","LineChart","Line","formatter","getName","ResponsiveContainer","aspect","maxHeight","ComposedChart","margin","top","right","left","bottom","CartesianGrid","XAxis","YAxis","domain","undefined","tickFormatter","Tooltip","cursor","Legend","onClick","hiddenMap","cloneDeep","iconSize","iconType","some","hide","legendType","tooltipType","stackId","headers","TableCell","scope","rows","TableRow","component","TableContainer","Table","textAlign","TableHead","TableBody","getNested","theme","useTheme","isSm","useMediaQuery","breakpoints","down","up","el","val","MULTI_LINE_TEXT_DELIN","title","getIntro","country","find","variant","fontWeight","lg","maxWidth","xl","mb","sm","display","mr","md","letterSpacing","textTransform","m","flexWrap","pt","justifyContent","xs","flexBasis","flexShrink","ml","pb","HomePage","homeCopy","tapFields","f","CMS_FIELDS","TAP","px","blurb","dangerouslySetInnerHTML","__html","py","borderRadius","paddingInlineStart","getTapList","Dictionary","dictionary","mx","mt","palette","paper","columnCount","columnGap","sort","a","b","term","definition","transformLink","App","setIso","setChartData","setDictionary","setCountries","setHomeCopy","setChartIds","setChartConfigsMap","useEffect","then","homecopy","charts","getChartData","loading","Paper","elevation","color","fontFamily","typography","target","realIso","createTheme","primary","main","secondary","ThemedApp","ThemeProvider","rootElement","document","getElementById","render","min","isFinite","toString","toPrecision","t","replaceAll","CONFIG_FIELDS","modelled","DATA_FIELDS","indicator","indicator_description","sex","age","population_segment","population_sub_group","country_name","area_name","geographic_scope","value_comment","unit_format","source_organization","notes","modality","modality_category","import_file","import_timestamp","row_id","suppressed","GENERATED_FIELDS","DISPLAY_VALUE_LOWER","DISPLAY_VALUE_UPPER"],"mappings":"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","file":"static/js/main.74d47395.chunk.js","sourcesContent":["import {\n  tomato,\n  red,\n  crimson,\n  pink,\n  plum,\n  purple,\n  violet,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  grass,\n  orange,\n  brown,\n  sky,\n  mint,\n  lime,\n  yellow,\n  amber,\n  gray,\n  mauve,\n  slate,\n  sage,\n  olive,\n  sand,\n  gold,\n  bronze,\n} from \"@radix-ui/colors\";\n\n// keep in sync with index.html background\nexport const themePrimary = sand;\nexport const themeSecondary = indigo;\nexport const headerColor = gold;\nexport const coreColors = [orange, grass, plum];\nexport const altColors = [tomato, indigo, gold];\nexport const alt2Colors = [sky, brown, violet, sand];\nexport const colorGroups = [coreColors, altColors, alt2Colors];\n// these intensities correspond to the radix index to use\nexport const fillIntensity = 8;\nexport const strokeIntensity = 11;\n\nexport const radColors = [\n  tomato,\n  red,\n  crimson,\n  pink,\n  plum,\n  purple,\n  violet,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  grass,\n  orange,\n  brown,\n  sky,\n  mint,\n  lime,\n  yellow,\n  amber,\n  gray,\n  mauve,\n  slate,\n  sage,\n  olive,\n  sand,\n  gold,\n  bronze,\n];\n\nexport const getRC = (radColor, idx) => {\n  // return custom colors as-is\n  if (typeof radColor === \"string\") return radColor;\n  const c1 = Object.keys(radColor)[0];\n  const c = c1.replace(/\\d/, \"\") + idx;\n  return radColor[c];\n};\n","import _ from \"lodash\";\nimport { colorGroups } from \"../consts/colors\";\nimport {\n  CONFIG_FIELDS as C,\n  DATA_FIELDS as D,\n  GENERATED_FIELDS as G,\n} from \"../consts/data\";\nimport { capValue, displayNumber, displayPercent } from \"./display\";\n\n// functions to test whether a row matches a filter for special Sheet cell input values\nconst SPECIAL_FILTERS_MAP = {\n  _NONE_: _.negate(_.identity), // cells only included if empty\n  _SOMETHING_: _.identity, // cells only included if not empty\n  _ANY_: _.stubTrue, // allow any cell value (to overwrite broader filter)\n};\n// default function to test whether a row matches a filter\nconst defaultCompFn = (cellVal, filterVal) =>\n  cellVal.toLowerCase() === filterVal.toLowerCase();\n\n// HELPERS\nexport const getUrl = (gid) =>\n  `https://docs.google.com/spreadsheets/d/e/2PACX-1vSAEOXOt5aHDcb35lpCsSO5AvHTZPplXHrHGaIXTJjCtW_B96D0MOItWZLGv1j4lagTxnuVClms6M0X/pub?gid=${gid}&single=true&output=csv`;\n\nexport const configParser = (row) => {\n  if (!row[C.chartId]) return;\n  delete row[\"\"];\n\n  _.each(row, (value, key) => {\n    // remove k/v pair for actually empty values\n    if (value === \"\") delete row[key];\n    // turn \"null\" in sheet into \"\" values\n    // else row[key] = value === \"null\" ? \"\" : value;\n  });\n\n  return row;\n};\n\nexport const filterByCountryGenerator = (selectedIso) => {\n  return (row) => (row[D.country_iso_code] === selectedIso ? row : null);\n};\n\n// determine actual chart elements from chart config\nexport const getElements = (chartConfig) =>\n  Object.keys(chartConfig).filter((k) => k !== \"all\" && !k.startsWith(\"_key_\"));\n\n// get setting from element, else chart, else global\nexport const getSetting = ({\n  element = \"all\",\n  chartConfigsMap,\n  field,\n  chartId = \"all\",\n}) =>\n  _.get(chartConfigsMap, [chartId, element, 0, field]) ||\n  _.get(chartConfigsMap, [chartId, \"all\", 0, field]) ||\n  _.get(chartConfigsMap, [\"all\", 0, field]);\n\n// omit element to get chart-wide setting\nexport const getField = ({ element = \"all\", chartConfig, field }) =>\n  _.get(chartConfig, [element, 0, field]);\n\n// omit element to get chart-wide setting\nexport const getFieldBoolean = ({ element = \"all\", chartConfig, field }) =>\n  !!getField({ element, chartConfig, field });\n\nexport const getFormula = ({ element, chartConfig }) =>\n  getField({ element, chartConfig, field: C.formula });\n\nexport const getBounds = (row = {}) => {\n  const { [D.value_lower]: vLower, [D.value_upper]: vUpper } = row;\n  if (!parseFloat(vLower) || !parseFloat(vUpper)) return;\n  return [parseFloat(vLower), parseFloat(vUpper)];\n};\n\n// determine a chart's colors based on its override settings\nexport const getColors = ({\n  chartSettings,\n  chartConfig,\n  chartElements: visibleElements,\n}) => {\n  // chart-wide override determines which color group to use\n  let groupIdx = parseInt(Math.abs(_.get(chartSettings, C.colorOverride)));\n  groupIdx = ((groupIdx || 1) - 1) % colorGroups.length;\n\n  const baseColors = colorGroups[groupIdx];\n  const colors = visibleElements.map((element, idx) => {\n    // element-specific overrides trump the base group color\n    const override = getField({ chartConfig, element, field: C.colorOverride });\n    return override || baseColors[idx % baseColors.length];\n  });\n\n  const type = _.get(chartSettings, C.chartType);\n  // nested boxes charts need one more color than they have elements\n  if (type === \"nested\")\n    colors.push(baseColors[visibleElements.length % baseColors.length]);\n\n  return colors;\n};\n\n// turn \"[2018-2020]\" into [2018, 2019, 2020]\nexport const transformYearRange = (range) => {\n  const regex = /\\[(\\d+)-(\\d+)\\]/;\n  const result = regex.exec(range);\n  if (!result || !result.length > 1) return [];\n  const y1 = parseInt(result[1]);\n  const y2 = parseInt(result[2]);\n  return _.range(y1, y2 + 1).map(String);\n};\n\n// derive a row filter of type { sex: \"males\", age: \"15+\" }\nexport const getFilter = ({\n  chartId,\n  element,\n  year = null,\n  selectedIso,\n  chartConfigsMap,\n}) => {\n  // filter applied to all charts\n  const allChartsFilter = _.get(chartConfigsMap, \"all[0]\", {});\n  // filter applied to all elements within this chart\n  const allElementsFilter = _.get(chartConfigsMap, [chartId, \"all\", 0], {});\n  // filter applied to this element\n  // (backupFilters may be used for source prioritization)\n  const [elementFilter, ...backupFilters] = _.get(\n    chartConfigsMap,\n    [chartId, element],\n    [{}]\n  );\n  // console.log(elementFilter);\n\n  const filter = {\n    ...allChartsFilter,\n    ...allElementsFilter,\n    ...elementFilter,\n    selectedIso,\n  };\n  if (!!year) filter.year = year;\n  return filter;\n};\n\n// find appropriate row using filter\nexport const getRow = ({ filter, chartSourceData }) => {\n  const matchingRows = _.filter(chartSourceData, (row) => {\n    return _.every(filter, (filterVal, field) => {\n      // only filter by data sheet fields\n      if (!D[field]) return true;\n\n      const cellVal = row[field] || \"\";\n      let comparisonFn = SPECIAL_FILTERS_MAP[filterVal] || defaultCompFn;\n\n      // if (!row[field]) return !filterVal;\n      return !!comparisonFn(cellVal, filterVal);\n    });\n  });\n\n  // find highest year, use source year to break ties\n  return _.maxBy(matchingRows, (r) => {\n    const y = Number(_.get(r, D.year, 0));\n    const sy = Number(_.get(r, D.sourceYear, 0));\n    return y + sy / 10000;\n  });\n};\n\n// find/create data point to use for a line point or table cell\nexport const getDataPoint = ({\n  chartId,\n  element,\n  year = null,\n  selectedIso,\n  chartConfigsMap,\n  chartSourceData,\n  // valueParser = _.identity,\n}) => {\n  const filter = getFilter({\n    chartId,\n    element,\n    year,\n    selectedIso,\n    chartConfigsMap,\n    chartSourceData,\n  });\n\n  const row = getRow({ filter, chartSourceData });\n\n  // usually we care about \"value\", but sometimes \"value_comment\"\n  const valueField = _.get(filter, C.valueField, D.value);\n  let value = _.get(row, valueField, null);\n\n  if (!row || !value) return {};\n\n  // add display name for elements appearance in legend, tooltip\n  const displayName = getField({\n    element,\n    chartConfig: chartConfigsMap[chartId],\n    field: C.displayName,\n  });\n  displayName && _.set(row, G.DISPLAY_NAME, displayName);\n\n  // assume that value_comment (or other non-value) field is for non-numeric column\n  if (valueField && valueField !== D.value) return { row, value };\n\n  // assume that value holds numeric data, proceed to process\n  return capAndFormat({ row, value, chartConfigsMap, chartId, element });\n};\n\n// mutates its row input!\n// applies caps and display formatting settings to numeric row/values\nexport const capAndFormat = ({\n  row,\n  value,\n  chartConfigsMap,\n  chartId,\n  element,\n}) => {\n  let displayValue = value;\n\n  const isPercentage = getFieldBoolean({\n    chartConfig: chartConfigsMap[chartId],\n    field: C.percentage,\n  });\n\n  if (isPercentage) {\n    const cap = getSetting({\n      chartConfigsMap,\n      chartId,\n      element,\n      field: C.capPercentage,\n    });\n    const decimals = getSetting({\n      chartConfigsMap,\n      chartId,\n      element,\n      field: C.percentageDecimals,\n    });\n\n    // value = value && valueParser(value);\n    const options = { cap, decimals };\n    // be sure to capture display value BEFORE capping, so it includes >\n    displayValue = displayPercent(value, options);\n    value = capValue(value, options);\n    // overwriting\n    capValue && _.set(row, D.value, value);\n\n    [D.value_lower, D.value_upper].forEach((F) => {\n      const v = _.get(row, F);\n\n      // formatted capped val for tooltips\n      v && _.set(row, `DISPLAY_${F.toUpperCase()}`, displayPercent(v, options));\n\n      // capped val for plotting\n      const cv = v && capValue(v, options);\n      cv && _.set(row, F, cv);\n    });\n  } else {\n    // is integer\n    const coarseFormatting = !!getSetting({\n      chartConfigsMap,\n      chartId,\n      element,\n      field: C.coarseIntegerFormatting,\n    });\n    displayValue = displayNumber(value, { coarseFormatting });\n\n    [D.value_lower, D.value_upper].forEach((F) => {\n      let v = _.get(row, F);\n      // formatted value for tooltips\n      v && _.set(row, `DISPLAY_${F.toUpperCase()}`, displayNumber(v));\n      // v && _.set(row, F, v);\n    });\n  }\n\n  // formatted value for tooltips\n  displayValue && _.set(row, G.DISPLAY_VALUE, displayValue);\n\n  return { row, value };\n};\n\n// create derived data point (from other found points) using formula provided in Sheet\nexport const getCalculatedDataPoint = ({\n  chartConfigsMap,\n  element,\n  dataPoints,\n  chartId,\n}) => {\n  const chartConfig = chartConfigsMap[chartId];\n  const rawFormula = getFormula({ element, chartConfig });\n  let convertedFormula = rawFormula;\n\n  // where the *magic* happens: formula is converted from the\n  // string provided in the Sheet to an actual mathematical\n  // expression by swapping element names for their values\n  // e.g.:  total_hiv-aware  becomes  7843-384\n  _.each(dataPoints, (value, key) => {\n    convertedFormula = convertedFormula.replace(key, value);\n  });\n\n  let result = null;\n  // attempt to evaluate the resulting expression\n  try {\n    result = eval(convertedFormula);\n  } catch (error) {\n    console.warn(`cannot evaluate ${rawFormula} (${convertedFormula})`);\n    return { value: null };\n  }\n\n  // only allow numbers & arith operators (otherwise eg null will evaluate to 0)\n  if (!/^[\\d-+*\\/\\.]+$/.test(convertedFormula) || !_.isNumber(result)) {\n    console.warn(`missing values for ${rawFormula} (${convertedFormula})`);\n    return { value: null };\n  }\n\n  // add display name for elements appearance in legend, tooltip\n  const displayName =\n    getField({\n      element,\n      chartConfig,\n      field: C.displayName,\n    }) || element;\n\n  // console.log(result);\n  return capAndFormat({\n    value: result,\n    row: { [G.DISPLAY_NAME]: displayName },\n    chartConfigsMap,\n    chartId,\n    element,\n  });\n};\n","import { csv } from \"d3-fetch\";\nimport _ from \"lodash\";\nimport {\n  CONFIG_FIELDS as C,\n  DATA_FIELDS as D,\n  GENERATED_FIELDS as G,\n  GID_MAP,\n  CONFIGURABLE_GID_NAMES,\n  TABLE_DELIN,\n  PRE_LOAD_DATA,\n  CMS_SHEETS,\n} from \"./consts/data\";\nimport {\n  getUrl,\n  configParser,\n  filterByCountryGenerator,\n  getElements,\n  getFieldBoolean,\n  getFormula,\n  getBounds,\n  getColors,\n  transformYearRange,\n  getDataPoint,\n  getCalculatedDataPoint,\n  getField,\n  getSetting,\n} from \"./utils/data\";\n\n// ASYNC FETCHERS\nasync function setConfigGids() {\n  // return if already configured\n  if (CONFIGURABLE_GID_NAMES.every((name) => !!GID_MAP[name])) return;\n  const homeRows = await csv(getUrl(GID_MAP.home)).catch((e) => {\n    console.error(\"error in csv(getUrl(GID_MAP.home)): \", e);\n  });\n  CONFIGURABLE_GID_NAMES.forEach((name) => {\n    const lastConfiguredRow = _.findLast(homeRows, (r) => !!r[name]);\n    if (!lastConfiguredRow) {\n      console.error(\"No Sheet GID found for: \", name);\n      return;\n    }\n    GID_MAP[name] = lastConfiguredRow[name];\n  });\n}\n\nasync function getChartConfigs() {\n  const baseConfigs = await csv(getUrl(GID_MAP.configs), configParser).catch(\n    (e) => {\n      console.error(\"error in csv(getUrl(GID_MAP.configs), configParser): \", e);\n    }\n  );\n  const shaped = _.groupBy(baseConfigs, C.chartId);\n\n  const chartIds = _.uniqBy(baseConfigs, \"chart_id\")\n    .map((c) => c.chart_id)\n    .filter((id) => id !== \"all\");\n\n  const chartConfigsMap = _.mapValues(shaped, (configParams, name) => {\n    // wise?\n    if (name === \"all\") return configParams;\n    return _.groupBy(configParams, C.element);\n  });\n\n  _.each(chartConfigsMap, (configParams, name) => {\n    if (name === \"all\") return;\n    _.each(configParams, (elemDetails, elementName) => {\n      if (elementName === \"all\") return;\n    });\n  });\n\n  return { chartConfigsMap, chartIds };\n}\n\nasync function getAllDataFromTab(gid) {\n  // console.log(\"get data from\", gid);\n  if (!gid) return null;\n  return await csv(getUrl(gid)).catch((e) => {\n    console.error(\"error in getChartOrTable()): \", e);\n  });\n}\n\n// so we only request data from each tab once\n// after first dashboard load, countries should load instantly\nconst memoizedGetAllDataFromTab = _.memoize(getAllDataFromTab);\n\nasync function getCountryDataFromTab(gid, selectedIso) {\n  const allData = await memoizedGetAllDataFromTab(gid);\n\n  return allData.filter((d) => filterByCountryGenerator(selectedIso)(d));\n}\n\nasync function getCharts({ chartConfigsMap, chartIds, selectedIso }) {\n  return await Promise.all(\n    chartIds.map((chartId) =>\n      getChartOrTable({ chartConfigsMap, chartId, selectedIso })\n    )\n  ).catch((e) => {\n    console.error(\"error in getCharts(): \", e);\n  });\n}\n\nasync function getChartOrTable({ chartConfigsMap, chartId, selectedIso }) {\n  // if (\n  //   ![\n  //     \"interventions\",\n  //     \"priorities\",\n  //     \"policy\",\n  //     \"commun_deliv\",\n  //     \"late_hiv\"\n  //   ].includes(chartId)\n  // )\n  //   return;\n  // console.log(\"creating : \", chartId);\n  const chartConfig = chartConfigsMap[chartId];\n  // the chart settings are the values on the chart config where element === \"all\"\n  const chartSettings = _.get(chartConfig, \"all[0]\");\n\n  if (!chartConfig || !chartSettings || !chartSettings[C.sourceGid]) {\n    console.warn(\"skipping chart: \", chartId);\n    return null;\n  }\n  const chartSourceData = await getCountryDataFromTab(\n    chartSettings[C.sourceGid],\n    selectedIso\n  );\n\n  const getterMap = {\n    table: getTable,\n    text: getText,\n    // nested: getNested, // uses chart\n  };\n\n  const getter = _.get(getterMap, chartSettings[C.chartType], getChart);\n\n  return getter({\n    chartId,\n    chartSettings,\n    chartConfigsMap,\n    chartSourceData,\n    selectedIso,\n  });\n}\n\nfunction getText({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  selectedIso,\n}) {\n  console.log(\n    chartId,\n    chartSettings,\n    chartConfigsMap,\n    chartSourceData,\n    selectedIso\n  );\n\n  const elements = getElements(chartConfigsMap[chartId]);\n  const textValues = {};\n  _.each(elements, (element) => {\n    const { row, value } = getDataPoint({\n      chartId,\n      element,\n      selectedIso,\n      chartConfigsMap,\n      chartSourceData,\n      // valueParser: isPercentage\n    });\n    textValues[element] = value;\n    textValues[`${element}_row`] = row;\n  });\n\n  return {\n    textValues,\n    chartId,\n    countryIso: selectedIso,\n    elements,\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n}\n\nfunction getTable({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  selectedIso,\n}) {\n  const chartConfig = chartConfigsMap[chartId];\n\n  const elements = getElements(chartConfig);\n  const dataPoints = {};\n  // add non-calculated points\n  const isPercentage = getFieldBoolean({\n    chartConfig,\n    field: C.percentage,\n  });\n  _.each(elements, (element) => {\n    const { row, value } = getDataPoint({\n      chartId,\n      element,\n      selectedIso,\n      chartConfigsMap,\n      chartSourceData,\n      // valueParser: isPercentage\n    });\n    dataPoints[element] = value;\n    dataPoints[element + \"_row\"] = row;\n  });\n\n  const rowNames = _.uniq(elements.map((elem) => elem.split(TABLE_DELIN)[0]));\n  const colNames = _.uniq(elements.map((elem) => elem.split(TABLE_DELIN)[1]));\n\n  const data = rowNames.map((rn) => ({\n    row: _.get(chartConfig, [`_key_${rn}`, 0, C.displayName], rn),\n    values: colNames.map((cn) => ({\n      column: _.get(chartConfig, [`_key_${cn}`, 0, C.displayName], cn),\n      columnNamed: _.get(chartConfig, [`_key_${cn}`, 0, C.displayName], false),\n      value: _.get(dataPoints, `${rn}${TABLE_DELIN}${cn}`),\n      sheetRow: _.get(dataPoints, `${rn}${TABLE_DELIN}${cn}_row`),\n    })),\n  }));\n\n  const chart = {\n    data,\n    chartId,\n    countryIso: selectedIso,\n    elements: elements,\n    isPercentage,\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n\n  return chart;\n}\n\nfunction getChart({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  selectedIso,\n}) {\n  const chartConfig = chartConfigsMap[chartId];\n\n  const elements = getElements(chartConfig);\n  const visibleElements = elements.filter(\n    (element) => !getFieldBoolean({ element, chartConfig, field: C.hidden })\n  );\n  // console.log(elements);\n\n  // NOTE: currently all charts range over years\n  const year_range = _.get(chartConfig, [\"all\", 0, D.year]);\n  const isTimeseries = year_range;\n  const years_arr = isTimeseries ? transformYearRange(year_range) : [\"all\"];\n  // console.log(years_arr);\n\n  // getchartdata per element\n  const data = _.map(years_arr, (year) => {\n    const dataPoints = {};\n\n    // add non-calculated points\n    _.each(elements, (element) => {\n      if (!!getFormula({ element, chartConfig })) return null;\n      const { row, value } = getDataPoint({\n        chartId,\n        element,\n        year: isTimeseries ? year : null,\n        selectedIso,\n        chartConfigsMap,\n        chartSourceData,\n      });\n      dataPoints[element] = value;\n      dataPoints[element + \"_row\"] = row;\n      dataPoints[element + \"_bounds\"] = getBounds(row);\n    });\n\n    // add calculated points (now that non-calculated constituents have values)\n    _.each(elements, (element) => {\n      if (!getFormula({ element, chartConfig })) return null;\n      const { row, value } = getCalculatedDataPoint({\n        chartId,\n        element,\n        chartConfigsMap,\n        dataPoints,\n      });\n      dataPoints[element] = value;\n      dataPoints[element + \"_row\"] = row;\n    });\n\n    // delete elements used only as constituents in calculations\n    _.each(elements, (element) => {\n      if (getFieldBoolean({ element, chartConfig, field: C.hidden })) {\n        // console.log(\"deleting: \", element);\n        delete dataPoints[element];\n      }\n    });\n    dataPoints.name = year;\n    // console.log(dataPoints);\n    return dataPoints;\n  });\n\n  const elementNameMap = {};\n  _.each(\n    visibleElements,\n    (element) =>\n      (elementNameMap[element] = getField({\n        element,\n        chartConfig: chartConfigsMap[chartId],\n        field: C.displayName,\n      }))\n  );\n\n  const colors = getColors({\n    chartSettings,\n    chartConfig,\n    chartElements: visibleElements,\n  });\n\n  const chart = {\n    data: isTimeseries ? data : data[0],\n    chartId,\n    countryIso: selectedIso,\n    elements: visibleElements,\n    elementNameMap,\n    colors,\n    isPercentage: getFieldBoolean({\n      chartConfig,\n      field: C.percentage,\n    }),\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n\n  return chart;\n}\n// ___ END ASYNC FETCHERS _____\n\n// MAIN FUNCTIONS\n\n/** SITE DATA - runs once on site load */\nexport async function getSiteData() {\n  // if (DISABLED) return [];\n  // CONFIGURE GIDS MAP\n  await setConfigGids().catch((e) => {\n    console.error(\"error in setConfigGids(): \", e);\n  });\n\n  // GRAB STRAIGHT-FORWARD TEXT COPY\n  const cmsDataResults = await Promise.all(\n    CMS_SHEETS.map((sheetName) =>\n      csv(getUrl(GID_MAP[sheetName])).catch((e) =>\n        console.error(`error getting ${sheetName}: `, e)\n      )\n    )\n  );\n  const cmsData = cmsDataResults.reduce((accum, result, idx) => {\n    const sheetName = CMS_SHEETS[idx];\n    accum[sheetName] = result;\n\n    return accum;\n  }, {});\n\n  // const countries = await csv(getUrl(GID_MAP.countries)).catch((e) =>\n  //   console.error(\"error in getcountries: \", e)\n  // );\n\n  // GRAB CONFIGS\n  const { chartConfigsMap, chartIds } = await getChartConfigs().catch((e) =>\n    console.error(\"error in getChartConfigs(): \", e)\n  );\n  console.log(\"@@@ ALL CONFIGS: \");\n  console.log(chartConfigsMap);\n\n  // request all data tabs' data for speedy loading on country selection\n  if (PRE_LOAD_DATA) {\n    const gids = _.map(chartConfigsMap, (config, chartId) =>\n      getSetting({ chartConfigsMap, chartId, field: C.sourceGid })\n    );\n    // console.log(\"gids: \", gids);\n    gids.forEach(memoizedGetAllDataFromTab);\n  }\n\n  return { ...cmsData, chartConfigsMap, chartIds };\n}\n\n/** CREATE CHARTS - whenever selected country changes */\nexport async function getChartData({ chartConfigsMap, chartIds, selectedIso }) {\n  const charts = await getCharts({\n    chartConfigsMap,\n    chartIds,\n    selectedIso\n  }).catch((e) => {\n    console.error(\"error in getCharts(selectedIso): \", e);\n  });\n\n  return { charts };\n}\n","import React from \"react\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n\nexport const CountrySelect = ({\n  handleCountryChange,\n  selectedIso,\n  countries,\n}) => {\n  return (\n    <FormControl sx={{ width: 300, marginTop: 1, marginBottom: 1 }}>\n      <InputLabel id=\"country\">Country</InputLabel>\n      <Select\n        labelId=\"country\"\n        id=\"country-select\"\n        value={selectedIso || \"home\"}\n        label=\"Country\"\n        onChange={handleCountryChange}\n      >\n        <MenuItem value={\"home\"}>\n          {!countries.length ? \"Loading...\" : \"Select a country...\"}\n        </MenuItem>\n        {countries.map(({ iso, name }) => (\n          <MenuItem key={iso} value={iso}>\n            {name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n","import React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport { CountrySelect } from \"./CountrySelect\";\nimport { getRC, headerColor } from \"../consts/colors\";\n\nexport const Header = ({ selectedIso, handleCountryChange, countries }) => {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"fixed\" sx={{ background: getRC(headerColor, 7) }}>\n        <Toolbar>\n          <CountrySelect\n            countries={countries}\n            handleCountryChange={handleCountryChange}\n            selectedIso={selectedIso}\n          />\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n};\n","import React from \"react\";\n// import './styles.css'\nimport _ from \"lodash\";\n\nconst BUFFER_RATIO = 0.2;\nconst TEXT_BUFFER_RATIO = 0.1;\nconst DEFAULT_RATIO = 0.7;\nconst FONT_SIZE_RATIO = 0.1;\nconst HEADER_FONT_SIZE_RATIO = 0.16;\nconst LINE_HEIGHT = 1.1;\nconst CAP_VALUE = null;\n\nconst innerTextGetter = (ratio, { capValue }) => {\n  return !ratio\n    ? \"Unknown %\"\n    : capValue && ratio > capValue\n    ? `>${capValue * 100}%`\n    : `${Math.round(ratio * 100)}%`;\n};\n\nconst NestedBoxes = ({\n  ratios,\n  fillColors,\n  textColors,\n  content,\n  firstSide = 100,\n  horizontal = true,\n  classes = \"\",\n  getInnerText = innerTextGetter,\n  bufferRatio = BUFFER_RATIO,\n  textBufferRatio = TEXT_BUFFER_RATIO,\n  defaultRatio = DEFAULT_RATIO,\n  capValue = CAP_VALUE,\n  fontSizeRatio = FONT_SIZE_RATIO,\n  headerFontSizeRatio = HEADER_FONT_SIZE_RATIO,\n  lineHeight = LINE_HEIGHT,\n}) => {\n  const resolveOrientation = (v1, v2) => {\n    return horizontal ? v2 : v1;\n  };\n\n  const bufferDistance = firstSide * (1 + bufferRatio);\n  const textBufferDistance = firstSide * (1 + textBufferRatio);\n\n  let side = firstSide;\n  let x = 0;\n  let y = 0;\n\n  const fontSize = firstSide * fontSizeRatio;\n  const headerFontSize = firstSide * headerFontSizeRatio;\n\n  const rects = [];\n  const texts = [];\n  const connectingLines = [];\n\n  _.each(ratios, (ratio, i) => {\n    // const noRatio = !ratio\n    const innerText = getInnerText(ratio, { capValue });\n    ratio = ratio || defaultRatio;\n\n    if (capValue && ratio > capValue) {\n      ratio = capValue;\n    }\n\n    const colorOuter = fillColors[i];\n    const colorInner = fillColors[i + 1];\n    const textColor = textColors[i + 1];\n\n    // add outer box\n    rects.push(\n      <rect\n        x={resolveOrientation(x, y)}\n        y={resolveOrientation(y, x)}\n        width={side}\n        height={side}\n        fill={colorOuter}\n      />\n    );\n\n    const { below = [] } = _.get(content, i, {});\n    const text = (\n      <text\n        fontSize={fontSize}\n        // set the initial y for all tspans\n        // the x we set on each individually so they don't try to go one after another\n        y={resolveOrientation(y + fontSize, textBufferDistance + fontSize)}\n      >\n        <tspan\n          className=\"percent\"\n          x={resolveOrientation(textBufferDistance, y)}\n          style={{ fill: textColor, fontSize: headerFontSize }}\n        >\n          {innerText}\n        </tspan>\n        {below.map((txt, j) => (\n          <tspan\n            key={i + j}\n            className=\"description\"\n            x={resolveOrientation(textBufferDistance, y)}\n            dy={fontSize * lineHeight}\n          >\n            {txt}\n          </tspan>\n        ))}\n      </text>\n    );\n    texts.push(text);\n\n    let nextSide = side * ratio;\n    const borderWidth = (side - nextSide) / 2; // the amount of outer box that shows around the inner box\n    x += borderWidth;\n    y += borderWidth;\n    side = nextSide;\n\n    // add inner box\n    rects.push(\n      <rect\n        x={resolveOrientation(x, y)}\n        y={resolveOrientation(y, x)}\n        width={side}\n        height={side}\n        fill={colorInner}\n      />\n    );\n\n    if (i === ratios.length - 1) {\n      return;\n    }\n\n    const lineStyle = {\n      strokeWidth: \".4\",\n      strokeDasharray: \".8 1\",\n    };\n    // if there's another box coming, add lines to it\n    const line1 = (\n      <line\n        style={lineStyle}\n        stroke={colorInner}\n        x1={resolveOrientation(x, y + side)}\n        x2={resolveOrientation(x, y + bufferDistance)}\n        y1={resolveOrientation(y + side, x)}\n        y2={resolveOrientation(y + bufferDistance, x)}\n      />\n    );\n    const line2 = (\n      <line\n        style={lineStyle}\n        stroke={colorInner}\n        x1={resolveOrientation(x + side, y + side)}\n        x2={resolveOrientation(x + side, y + bufferDistance)}\n        y1={resolveOrientation(y + side, x + side)}\n        y2={resolveOrientation(y + bufferDistance, x + side)}\n      />\n    );\n    connectingLines.push(line1, line2);\n\n    // and shift down for the next\n    y += bufferDistance;\n  });\n\n  const totalX = firstSide + (textBufferDistance + firstSide); // (text width)\n  const totalY = y + firstSide;\n  const totalXh = y + bufferDistance;\n  const totalYh = textBufferDistance + (headerFontSize + fontSize * 5); // (text height)\n\n  const classNames = \"nested-boxes \" + classes;\n\n  return (\n    <div className={classNames}>\n      {/* <p className='title'>{title}</p> */}\n      <svg\n        viewBox={`0 -2 ${resolveOrientation(\n          totalX,\n          totalXh\n        )} ${resolveOrientation(totalY, totalYh)}`}\n      >\n        {rects}\n        {texts}\n        {connectingLines}\n      </svg>\n    </div>\n  );\n};\n\nexport default NestedBoxes;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  AreaChart,\n  Area,\n  ComposedChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LineChart,\n  Line,\n  ResponsiveContainer,\n  Legend,\n} from \"recharts\";\nimport { Box, useTheme } from \"@mui/system\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport NestedBoxes from \"./NestedBoxes\";\nimport {\n  getRC,\n  strokeIntensity,\n  fillIntensity,\n  themePrimary,\n  themeSecondary,\n} from \"../consts/colors\";\nimport { displayNumber, displayPercent } from \"../utils/display\";\nimport {\n  CONFIG_FIELDS as C,\n  DATA_FIELDS as D,\n  GENERATED_FIELDS as G,\n  MULTI_LINE_TEXT_DELIN,\n} from \"../consts/data\";\nimport { useMediaQuery } from \"@mui/material\";\n\n// TODO: standardize / create sane system for styles\n// TODO: CLEAN / EXTRACt this and other components\nconst CustomTooltip = ({ active, payload, label, isArea }) => {\n  if (active && payload && payload.length) {\n    // if lines, stack legend to match line height order\n    const payloads = isArea ? payload : _.sortBy(payload, \"value\");\n\n    let source = null;\n    return (\n      <Box sx={{ background: \"white\", p: 2 }} className=\"custom-tooltip\">\n        <strong className=\"label\">{label}</strong>\n        {payloads.reverse().map((p) => {\n          if (p.dataKey.includes(\"_bounds\")) return;\n\n          const bounds = _.get(p.payload, p.dataKey + \"_bounds\", []);\n          const formattedBounds = [D.value_lower, D.value_upper].map((F, i) =>\n            _.get(\n              p.payload,\n              [p.dataKey + \"_row\", `DISPLAY_${F.toUpperCase()}`],\n              bounds[i]\n            )\n          );\n\n          const v = _.get(\n            p.payload,\n            [p.dataKey + \"_row\", G.DISPLAY_VALUE],\n            p.value\n          );\n          // console.log(\"$$$\", v, p.payload);\n\n          // use first source\n          source =\n            source ||\n            _.get(p.payload, [p.dataKey + \"_row\", D.source_display]) ||\n            _.get(p.payload, [p.dataKey + \"_row\", D.source_database]);\n\n          return (\n            <Typography key={p.dataKey}>\n              <svg\n                width=\"18\"\n                viewBox=\"0 0 160 100\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <circle cx=\"50\" cy=\"50\" r=\"50\" fill={p.fill}></circle>\n              </svg>\n              {p.name}: {v}{\" \"}\n              {!!bounds.length && `(${formattedBounds.join(\" - \")})`}\n            </Typography>\n          );\n        })}\n        {source && (\n          <>\n            <br />\n            <u>Source</u>: {source}\n          </>\n        )}\n      </Box>\n    );\n  } else return null;\n};\n\nexport const Charts = ({ selectedIso, chartData, countries }) => {\n  const [hiddenElements, setHiddenElements] = React.useState({});\n\n  const getLineChart = (chart) => {\n    const {\n      data,\n      chartId,\n      elements,\n      type,\n      isPercentage,\n      colors,\n      elementNameMap,\n    } = chart;\n    const isArea = type === \"area\";\n    const [, ElementComponent] = isArea ? [AreaChart, Area] : [LineChart, Line];\n\n    const formatter = isPercentage\n      ? (v) => displayPercent(v)\n      : (v) => displayNumber(v);\n\n    const getName = (elem) => _.get(elementNameMap, elem, elem);\n\n    const onLegendClick = (e) => {\n      console.log(e.dataKey);\n      const hiddenMap = _.cloneDeep(hiddenElements);\n      const hidden = _.get(hiddenMap, [chartId, e.dataKey], false);\n      _.set(hiddenMap, [chartId, e.dataKey], !hidden);\n      setHiddenElements(hiddenMap);\n    };\n\n    return (\n      <ResponsiveContainer\n        // needed for proper resizing https://github.com/recharts/recharts/issues/172#issuecomment-307858843\n        width=\"99%\"\n        aspect={1.25}\n        // height={400}\n        maxHeight={400}\n        // maxWidth={600}\n      >\n        <ComposedChart\n          // width={500}\n          // height={400}\n          data={data}\n          margin={{\n            top: 30,\n            right: 30,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis\n            width={80}\n            domain={isPercentage ? [0, 100] : undefined}\n            tickFormatter={formatter}\n          />\n          <Tooltip\n            cursor={{ stroke: getRC(themeSecondary, 10), strokeWidth: 1 }}\n            content={<CustomTooltip isArea={isArea} />}\n          />\n          <Legend\n            onClick={onLegendClick}\n            iconSize={isArea ? 8 : 14}\n            iconType={isArea && \"circle\"}\n          />\n          {elements.map((elem, i) => {\n            const isBounded =\n              !isArea &&\n              _.some(data, (d) => _.get(d, [elem + \"_bounds\"], []).length);\n            if (!isBounded) return null;\n            return (\n              <Area\n                key={i + \"_b\"}\n                // type=\"step\"\n                dataKey={elem + \"_bounds\"}\n                hide={_.get(hiddenElements, [chartId, elem], false)}\n                // stackId={i + 1}\n                legendType=\"none\"\n                tooltipType=\"none\"\n                stroke={getRC(colors[i], strokeIntensity - 3)}\n                fill={getRC(colors[i], fillIntensity - 3)}\n              />\n            );\n          })}\n          {elements.map((elem, i) => (\n            <ElementComponent\n              key={i}\n              // type=\"monotone\"\n              // dataBounds={_.get(elem, [elem + \"_bounds\"], [])}\n              dataKey={elem}\n              name={getName(elem)}\n              hide={_.get(hiddenElements, [chartId, elem], false)}\n              stackId={isArea ? 1 : i + 1000}\n              stroke={getRC(colors[i], strokeIntensity)}\n              fill={getRC(colors[i], fillIntensity)}\n            />\n          ))}\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  const getTable = (chart) => {\n    const { data } = chart;\n\n    // const columnsNamed = _.some(data[0][\"values\"], \"columnNamed\");\n    const headers =\n      // columnsNamed &&\n      data[0][\"values\"].map(({ column, columnNamed }) => (\n        <TableCell scope=\"col\" key={column}>\n          {columnNamed && column}\n        </TableCell>\n      ));\n\n    const rows = data.map(({ row, values }) => (\n      <TableRow key={row}>\n        <TableCell scope=\"row\" component=\"th\">\n          {row}\n        </TableCell>\n        {values.map(({ value, column, sheetRow }) => (\n          <TableCell key={column}>\n            {_.get(sheetRow, G.DISPLAY_VALUE, value) || \"N/A\"}\n            {/* {(value && (sheetRow && sheetRow[G.DISPLAY_VALUE] || value)) || \"N/A\"} */}\n          </TableCell>\n        ))}\n      </TableRow>\n    ));\n\n    return (\n      <ResponsiveContainer>\n        <TableContainer>\n          <Table\n            sx={{\n              \"& tbody tr:nth-of-type(odd)\": {\n                background: getRC(themePrimary, 6),\n              },\n              \"& td, & thead th\": {\n                textAlign: \"right\",\n              },\n            }}\n          >\n            <TableHead>\n              <TableRow>\n                <TableCell scope=\"col\"></TableCell>\n                {headers}\n              </TableRow>\n            </TableHead>\n            <TableBody>{rows}</TableBody>\n          </Table>\n        </TableContainer>\n      </ResponsiveContainer>\n    );\n  };\n\n  const getNested = (chart) => {\n    const theme = useTheme();\n    const isSm = useMediaQuery(theme.breakpoints.down(\"sm\"));\n    const isXl = useMediaQuery(theme.breakpoints.up(\"md\"));\n    const { data, elements, colors, elementNameMap } = chart;\n    const xl = false;\n    // console.log(radColors);\n    const ratios = elements.map((el) => {\n      const val = data[el];\n      return val && val / 100;\n    });\n    const content = elements.map((el) => {\n      const text = elementNameMap[el];\n      return { below: text.split(MULTI_LINE_TEXT_DELIN) };\n    });\n    // console.log(ratios);\n    return (\n      <>\n        <NestedBoxes\n          // circle={true}\n          // classes={xl ? \"xl\" : \"\"}\n          title={\"title\"}\n          bufferRatio={!isSm ? 0.8 : 0.2}\n          lineHeight={!isSm ? 1.4 : 1.1}\n          textBufferRatio={0.2}\n          firstSide={20}\n          horizontal={!isSm}\n          ratios={ratios}\n          fillColors={colors.map((c) => getRC(c, 8))}\n          textColors={colors.map((c) => getRC(c, 9))}\n          content={content}\n        />\n        <br />\n      </>\n    );\n  };\n\n  const getIntro = (chart) => {\n    const country = countries.find((c) => c.iso === selectedIso);\n    return (\n      <>\n        <Typography\n          variant=\"h2\"\n          component=\"h1\"\n          sx={{\n            fontWeight: 500,\n            lineHeight: 1,\n            fontSize: { lg: \"6rem\" },\n            maxWidth: { lg: 760, xl: \"100%\" },\n            mb: { sm: 1, lg: 2 },\n          }}\n        >\n          {country && country.name}\n        </Typography>\n        <Box\n          sx={{\n            display: { sm: \"flex\" },\n            \"& dl:not(:last-child)\": { mr: { sm: 4, md: 10 } },\n            \"& dt h2\": {\n              fontWeight: 100,\n              letterSpacing: \".8px\",\n              textTransform: \"uppercase\",\n            },\n            \"& dt, dd\": { m: 0 },\n          }}\n        >\n          {chart.elements.map((elem) => {\n            return (\n              <dl key={elem}>\n                <dt>\n                  <Typography variant=\"h6\" component=\"h2\">\n                    {_.get(\n                      chart,\n                      [\"textValues\", `${elem}_row`, G.DISPLAY_NAME],\n                      \"\"\n                    )}\n                  </Typography>\n                </dt>\n                <dd>\n                  <Typography variant=\"h4\" component=\"h2\">\n                    {_.get(\n                      chart,\n                      [\"textValues\", `${elem}_row`, G.DISPLAY_VALUE],\n                      chart.textValues[elem]\n                    )}\n                  </Typography>\n                </dd>\n              </dl>\n            );\n          })}\n        </Box>\n      </>\n    );\n  };\n\n  const getChart = (chart) => {\n    // TODO: simplify\n    if (!chart) return null;\n    const { type, chartId, name } = chart;\n\n    // if (type === \"text\") {\n    if (chartId === \"intro\") {\n      return (\n        <Box\n          sx={{\n            // background: { xs: \"red\", sm: \"blue\", md: \"green\", lg: \"yellow\", xl: \"purple\" },\n            flexBasis: { xs: \"100%\", xl: 600 },\n            flexGrow: { xl: 0 },\n            p: 3,\n            // display: {md: \"flex\"},\n          }}\n          key={chartId}\n        >\n          {getIntro(chart)}\n        </Box>\n      );\n    }\n\n    if (type === \"table\") {\n      return (\n        <Box sx={{ flexBasis: \"100%\", maxWidth: 864, p: 3 }} key={chartId}>\n          <Typography variant=\"h5\" component=\"h3\">\n            {name}\n          </Typography>\n          {getTable(chart)}\n        </Box>\n      );\n    }\n\n    if (type === \"nested\") {\n      return (\n        <>\n          <Box\n            sx={{\n              flexBasis: { xs: \"100%\", xl: 700 },\n              flexGrow: { xl: 1 },\n              flexShrink: { xl: 1 },\n              mr: \"auto\",\n              ml: { xl: \"auto\" },\n              maxWidth: 864,\n              p: 3,\n            }}\n            key={chartId}\n          >\n            <Typography pb={3} variant=\"h5\" component=\"h3\">\n              {name}\n            </Typography>\n            {getNested(chart)}\n          </Box>\n          <Box sx={{ flexBasis: \"100%\", height: 0 }} />\n        </>\n      );\n    }\n    // if (chart.type === \"area\") return getAreaChart(chart);\n    return (\n      <Box\n        key={chartId}\n        sx={{\n          width: \"100%\",\n          maxWidth: { md: \"44%\", xl: \"29%\" },\n          p: 3,\n        }}\n      >\n        <Typography variant=\"h5\" component=\"h3\">\n          {name}\n        </Typography>\n        {getLineChart(chart)}\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      pt={8}\n      sx={{\n        justifyContent: { xs: \"space-evenly\", md: \"space-between\" },\n      }}\n    >\n      {chartData.map(getChart)}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { Typography } from \"@mui/material\";\nimport { CMS_FIELDS } from \"../consts/data\";\n\nexport const HomePage = ({ homeCopy }) => {\n  if (!homeCopy || !homeCopy.length) return null; // TODO: spinner\n  // console.log(homeCopy, homeCopy && homeCopy[0]);\n  const tapFields = Object.keys(homeCopy[0]).filter((f) =>\n    f.startsWith(CMS_FIELDS.TAP)\n  );\n\n  const getTapList = (f) => {\n    return (\n      <Box\n        key={f}\n        sx={{\n          background: \"#f2c2b4\",\n          p: 1,\n          m: 1,\n          borderRadius: \"8px\",\n          // flexBasis: \"250px\",\n          height: \"100%\",\n        }}\n      >\n        {/* <b>{f.replace(CMS_FIELDS.TAP, \"\")}</b> */}\n        <Typography\n          variant=\"body1\"\n          sx={{\n            fontSize: { sm: \"smaller\", md: \"unset\" },\n          }}\n          variant=\"h7\"\n          component=\"h3\"\n          dangerouslySetInnerHTML={{\n            __html: f.replace(CMS_FIELDS.TAP, \"\"),\n          }}\n        />\n        <ul\n          style={{\n            // listStyle: \"none\",\n            paddingInlineStart: \"20px\",\n          }}\n        >\n          {homeCopy.map(\n            (row, i) =>\n              !!row[f] && (\n                <li>\n                  <Typography\n                    variant=\"body1\"\n                    key={i}\n                    // sx={{ maxWidth: 600, margin: \"auto\" }}\n                    // pt={2}\n                    sx={{\n                      fontSize: { sm: \"smaller\", md: \"unset\" },\n                    }}\n                    // px={3}\n                    dangerouslySetInnerHTML={{\n                      __html: row[f],\n                    }}\n                  />\n                </li>\n              )\n          )}\n        </ul>\n      </Box>\n    );\n  };\n\n  return (\n    <Box pt={\"72px\"} px={3}>\n      {/* todo: constify header height */}\n      <Box>\n        {homeCopy.map(\n          (row, i) =>\n            !!row[CMS_FIELDS.blurb] && (\n              <Typography\n                variant=\"body1\"\n                key={i}\n                sx={{\n                  fontSize: { sm: \"smaller\", md: \"unset\" },\n                }}\n                // sx={{ maxWidth: 600, margin: \"auto\" }}\n                pt={1}\n                // px={3}\n                dangerouslySetInnerHTML={{\n                  __html: row[CMS_FIELDS.blurb],\n                }}\n              />\n            )\n        )}\n      </Box>\n      <Box py={5} className=\"tap-lists-container\">\n        <Typography\n          variant=\"h6\"\n          component=\"h2\"\n          dangerouslySetInnerHTML={{\n            __html: \"Technical Assistance Providers\",\n          }}\n        />\n        <Box\n          className=\"tap-lists\"\n          sx={{\n            display: { sm: \"flex\" },\n          }}\n        >\n          {tapFields.map((f) => getTapList(f))}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { Typography, useTheme } from \"@mui/material\";\nimport { CMS_FIELDS } from \"../consts/data\";\nimport { transformLink } from \"../utils/display\";\n\nexport const Dictionary = ({ dictionary }) => {\n  const theme = useTheme();\n  return (\n    <Box\n      sx={{\n        px: { xs: 3, lg: 10 },\n        mx: { lg: 5 },\n        mb: { lg: 5 },\n        py: 9,\n        mt: 9,\n        background: theme.palette.background.paper,\n\n        \"& dl\": {\n          display: \"inline-block\",\n          width: \"100%\",\n          mt: 0,\n          mb: { lg: 3 },\n          fontSize: 15,\n        },\n        \"& dd\": { ml: 0, mt: { xs: 1 }, fontSize: 13 },\n      }}\n    >\n      <Typography\n        variant=\"h6\"\n        component=\"h2\"\n        dangerouslySetInnerHTML={{\n          __html: \"Glossary\",\n        }}\n      />\n      <Box\n        sx={{\n          columnCount: { md: 2, xl: 3 },\n          columnGap: { xs: \"2rem\", lg: \"5rem\" },\n          mt: 3,\n        }}\n      >\n        {dictionary\n          .sort((a, b) => a.term.toLowerCase() > b.term.toLowerCase())\n          .map(({ [\"term\"]: x, definition }) => {\n            return (\n              <dl>\n                <dt>\n                  <strong>{x}</strong>\n                </dt>\n                <dd>\n                  <Typography\n                    // sx={{ maxWidth: \"500px\" }}\n                    dangerouslySetInnerHTML={{\n                      __html: transformLink(definition),\n                    }}\n                  />\n                </dd>\n              </dl>\n            );\n          })}\n      </Box>\n    </Box>\n  );\n};\n","// import \"./styles.css\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { getSiteData, getChartData } from \"../getData\";\nimport { themePrimary, radColors, getRC } from \"../consts/colors\";\nimport { Container, Paper, Typography, useTheme } from \"@mui/material\";\nimport { Header } from \"./Header\";\nimport { Charts } from \"./Charts\";\nimport { Box } from \"@mui/system\";\nimport { transformLink } from \"../utils/display\";\nimport { HomePage } from \"./HomePage\";\nimport { Dictionary } from \"./Dictionary\";\n\nconst SHOW_COLORS = false;\n\nexport default function App() {\n  const [selectedIso, setIso] = React.useState(null);\n  const [chartData, setChartData] = React.useState([]);\n\n  const [dictionary, setDictionary] = React.useState([]);\n  const [countries, setCountries] = React.useState([]);\n  const [homeCopy, setHomeCopy] = React.useState([]);\n  const [chartIds, setChartIds] = React.useState([]);\n  const [chartConfigsMap, setChartConfigsMap] = React.useState(null);\n\n  // on page load, get site-wide data\n  React.useEffect(() => {\n    getSiteData().then((result) => {\n      setDictionary(result.dictionary.filter((d) => d.term && d.definition));\n      setCountries(result.countries.filter((c) => c.iso && c.name));\n      setHomeCopy(result.homecopy);\n      setChartIds(result.chartIds);\n      setChartConfigsMap(result.chartConfigsMap);\n    });\n  }, []);\n\n  // on country selection change, get country-specific chart data\n  React.useEffect(() => {\n    if (!selectedIso) return;\n    getChartData({ chartConfigsMap, chartIds, selectedIso }).then((result) => {\n      console.log(\"@@@ ALL DATA: \");\n      console.log(result.charts);\n      setChartData(result.charts);\n    });\n  }, [selectedIso]);\n\n  const updateCountry = (e) => {\n    const value = e.target.value;\n    const realIso = _.some(countries, ({ iso }) => iso === value);\n    setIso(realIso ? value : null);\n  };\n\n  // console.log(\"*\", chartData);\n  const loading = !_.some(chartData, (c) => c && c.countryIso === selectedIso);\n\n  const theme = useTheme();\n  return (\n    <Paper\n      elevation={0}\n      sx={{\n        // keep in sync with index.html background\n        background: getRC(themePrimary, 3),\n        color: getRC(themePrimary, 12),\n        fontFamily: theme.typography.fontFamily,\n        p: { lg: 6 },\n      }}\n    >\n      <Header\n        countries={countries}\n        handleCountryChange={updateCountry}\n        selectedIso={selectedIso}\n      />\n      <br />\n\n      {!selectedIso ? (\n        <HomePage homeCopy={homeCopy} />\n      ) : loading ? (\n        <Box pt={\"50vh\"}>\n          <Typography\n            variant=\"body1\"\n            sx={{ textAlign: \"center\" }}\n            dangerouslySetInnerHTML={{\n              __html: \"loading...\",\n            }}\n          />\n        </Box>\n      ) : (\n        <Charts\n          countries={countries}\n          selectedIso={selectedIso}\n          chartData={chartData}\n        />\n      )}\n      {!!dictionary.length && !loading && (\n        <Dictionary dictionary={dictionary} />\n      )}\n      {SHOW_COLORS &&\n        radColors.map((rc) => (\n          <>\n            <br></br>\n            {_.map(Object.keys(radColors[0]), (meh, idx) => (\n              <span\n                style={{\n                  background: getRC(rc, idx + 1),\n                  height: \"70px\",\n                  width: \"70px\",\n                  display: \"inline-block\",\n                  textAlign: \"center\",\n                }}\n              >\n                {idx + 1}\n              </span>\n            ))}\n            {Object.keys(rc)[0].replace(/\\d/, \"\")}\n          </>\n        ))}\n    </Paper>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./components/App\";\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { getRC, themePrimary, themeSecondary } from \"./consts/colors\";\n// import { red } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: getRC(themePrimary, 11),\n    },\n    secondary: {\n      main: getRC(themeSecondary, 8),\n    },\n  },\n  typography: {\n    fontFamily: [\n      'Archivo',\n      'sans-serif',\n    ].join(','),\n  },\n});\n\nfunction ThemedApp() {\n  return <ThemeProvider theme={theme}><App /></ThemeProvider>;\n}\n\n\nconst rootElement = document.getElementById(\"root\");\nrender(<ThemedApp />, rootElement);\n","import _ from \"lodash\";\n\nexport const capValue = (v, options = {}) => {\n  v = Number(v);\n  // !_.isEmpty(options) && console.log(\"cvOPTIONS: \", v, options);\n  if (options.cap) return Math.min(v, Number(options.cap));\n  return v;\n};\n\nexport const displayPercent = (v, options = {}) => {\n  // !_.isEmpty(options) && console.log(\"OPTIONS: \", v, options);\n  v = Number(v);\n  if (!isFinite(v)) return \"NA\";\n  if (options.cap && v > Number(options.cap)) {\n    const x = `>${options.cap}%`;\n    // console.log(\"!!!!\", x, v, options.cap);\n    return x;\n  }\n  if (v > 100) console.warn(\"Incorrect %\");\n\n  const decimals = options.decimals || 0;\n  return _.round(v, decimals).toString() + \"%\";\n};\n\nexport const displayNumber = (v, options = {}) => {\n  v = Number(v);\n  if (options.coarseFormatting) {\n    if (v > 1000000000) {\n      return _.round(v / 1000000000, 1).toString() + \" billion\";\n    } else if (v > 1000000) {\n      return _.round(v / 1000000, 1).toString() + \" million\";\n    } else if (v < 100) {\n      return \"<100\";\n    } else if (v < 200) {\n      return \"<200\";\n    } else if (v < 500) {\n      return \"<500\";\n    } else if (v < 1000) {\n      return \"<1000\";\n    } else {\n      v = Number(v.toPrecision(2));\n    }\n  }\n\n  // insert spaces rather than commas\n  return v.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1 \");\n};\n\nexport const transformLink = (t) =>\n  t.replaceAll(\"<a \", \"<a target='_blank' rel='noopener noreferrer'\");\n","// export CONSTS\nexport const DISABLED = false;\nexport const PRE_LOAD_DATA = true;\nexport const TABLE_DELIN = \"__\";\nexport const MULTI_LINE_TEXT_DELIN = \"__\";\n\n// sheets we can just grab copy directly from\nexport const CMS_SHEETS = [\"dictionary\", \"countries\", \"homecopy\"];\n// these are set in the home sheet for version controlability\nexport const CONFIGURABLE_GID_NAMES = [\"configs\", ...CMS_SHEETS];\n// gids pointing to Sheet tabs\nexport const GID_MAP = {\n  home: \"0\",\n  // configs: null,\n  // dictionary: null,\n  // countries: null,\n  // homepage: null,\n};\n\n// now extracted from chart configs sheet\n// export const chartIds = [\n//   \"p95\",\n//   \"plhiv_diagnosis\",\n//   \"late_hiv\",\n//   \"plhiv_art\",\n//   \"new_art\",\n//   \"plhiv_suppressed\",\n//   \"testing_coverage\",\n//   \"key_populations\",\n//   \"policy_compliance\",\n// ];\n\n// MAPS TO SPREADSHEET COLUMN NAMES:\n// CONFIG SHEET - identifier fields (ie non-data fields)\nexport const CONFIG_FIELDS = {\n  chartId: \"chart_id\",\n  sourceGid: \"source_gid\",\n  element: \"element\",\n  displayName: \"display_name\",\n  capPercentage: \"cap_percentage\",\n  percentageDecimals: \"percentage_decimals\",\n  coarseIntegerFormatting: \"coarse_integer_formatting\",\n  colorOverride: \"color_override\",\n  chartType: \"chart_type\",\n  modelled: \"modelled\",\n  formula: \"formula\",\n  hidden: \"hidden\",\n  valueField: \"value_field\",\n  percentage: \"percentage\",\n};\n\n// DATA SHEETS - data fields (fields that configs can filter by)\nexport const DATA_FIELDS = {\n  // we preserve snake_case as a reminder that these are essentially database fields\n  country_iso_code: \"country_iso_code\",\n  sourceYear: \"source_year\",\n  value: \"value\",\n  year: \"year\",\n  indicator: \"indicator\",\n  indicator_description: \"indicator_description\",\n  sex: \"sex\",\n  age: \"age\",\n  population_segment: \"population_segment\",\n  population_sub_group: \"population_sub_group\",\n  country_name: \"country_name\",\n  area_name: \"area_name\",\n  geographic_scope: \"geographic_scope\",\n  value_upper: \"value_upper\",\n  value_lower: \"value_lower\",\n  value_comment: \"value_comment\",\n  unit_format: \"unit_format\",\n  source_organization: \"source_organization\",\n  source_database: \"source_database\",\n  source_display: \"source_display\",\n  notes: \"notes\",\n  modality: \"modality\",\n  modality_category: \"modality_category\",\n  import_file: \"import_file\",\n  import_timestamp: \"import_timestamp\",\n  row_id: \"row_id\",\n  suppressed: \"suppressed\",\n};\n\n// fields used in the \"cms\" sheets (countries, dictionary, etc)\nexport const CMS_FIELDS = {\n  // dictionary\n  term: \"term\",\n  definition: \"definition\",\n  // countries\n  iso: \"iso\",\n  name: \"name\",\n  // homecopy\n  blurb: \"blurb\",\n  TAP: \"_TAP_\", // prefix to fields for the Technical Assistance Provider fields\n};\n\n// GENERATED FIELDS - fields we add for the app\nexport const GENERATED_FIELDS = {\n  // we use UPPER_CASE to distinguish from actual \"database\" fields from the Sheet\n  DISPLAY_NAME: \"DISPLAY_NAME\",\n  DISPLAY_VALUE: \"DISPLAY_VALUE\",\n  DISPLAY_VALUE_LOWER: `DISPLAY_${DATA_FIELDS.value_lower.toUpperCase()}`,\n  DISPLAY_VALUE_UPPER: `DISPLAY_${DATA_FIELDS.value_upper.toUpperCase()}`,\n};\n"],"sourceRoot":""}